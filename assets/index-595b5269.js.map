{"version":3,"file":"index-595b5269.js","sources":["../../src/components/input/input.styles.ts","../../src/components/input/index.tsx"],"sourcesContent":["import { SxStyleProp } from 'rebass';\nimport { ITheme } from '../../theme/types';\nimport { Intents } from '../intents';\n\nconst getIntentColor =\n  (intent: Intents) =>\n  ({ inputIntents }: ITheme) =>\n    inputIntents[intent] ?? 'transparent';\n\nconst getStyles = (intent: Intents, isTextArea: boolean): SxStyleProp => ({\n  width: '100%',\n\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  borderColor: getIntentColor(intent),\n\n  outline: 'none',\n\n  px: '8px',\n  pt: isTextArea ? '4px' : undefined,\n\n  transition: 'all 0.25s ease',\n\n  fontFamily: 'text',\n  fontWeight: 'text',\n  fontSize: 'text',\n  lineHeight: isTextArea ? '20px' : '28px',\n\n  ...(isTextArea && { resize: 'vertical' }),\n});\n\nexport const getIconStyle = {\n  left: '8px',\n  position: 'absolute',\n  top: '8px',\n  fontSize: '14px',\n};\n\nexport default getStyles;\n","import { Box, Flex } from 'rebass';\nimport { forwardRef } from 'react';\nimport { InputProps as RebassInputProps } from 'rebass__forms';\n\nimport Label, { LabelProps } from '../label';\nimport InputInfo from '../input-info';\nimport { Intents } from '../intents';\nimport getStyles, { getIconStyle } from './input.styles';\nimport Labeling from '../typography/labeling';\nimport Tooltip from '../tooltip';\nimport { GetIcon, IconName } from '../icon';\n\nexport interface InputProps extends Omit<RebassInputProps, 'css'> {\n  variant?: 'primary' | 'white';\n  intent?: Intents;\n  info?: string;\n  icon?: IconName;\n  rightIcon?: React.ReactElement;\n  suffix?: string;\n  iconPaddingRight?: string;\n  label?: string;\n  placeholder?: string;\n  width?: string | number;\n  labelProps?: Omit<LabelProps, 'action' | 'text' | 'children'>;\n  labelAction?: React.ReactNode;\n  type?: 'text' | 'number' | 'textarea' | 'password';\n  rows?: number;\n  optional?: boolean;\n  tooltipInfo?: string;\n}\n\nconst Input = forwardRef(\n  (\n    {\n      placeholder,\n      label = '',\n      labelAction,\n      icon,\n      rightIcon,\n      info,\n      iconPaddingRight,\n      readOnly,\n      width = '180px',\n      labelProps,\n      variant = 'primary',\n      intent = 'default',\n      type = 'text',\n      rows = 3,\n      tooltipInfo,\n      optional,\n      sx,\n      suffix,\n      ...props\n    }: InputProps,\n    ref,\n  ) => {\n    const isTextArea = type === 'textarea';\n\n    const actions = (labelAction || tooltipInfo || optional) && (\n      <Flex>\n        {labelAction}\n        {optional && (\n          <Labeling ml=\"8px\" bold gray>\n            optional\n          </Labeling>\n        )}\n        {tooltipInfo && (\n          <Tooltip mainText={tooltipInfo}>\n            <GetIcon ml=\"3px\" mt=\"3px\" size=\"xs\" icon={IconName.info_block} />\n          </Tooltip>\n        )}\n      </Flex>\n    );\n\n    return (\n      <Label action={actions} text={label} width={width} {...labelProps}>\n        <Box\n          sx={{\n            position: 'relative',\n          }}\n        >\n          <Box\n            ref={ref}\n            as={isTextArea ? 'textarea' : 'input'}\n            type={type}\n            tx=\"inputs\"\n            rows={rows}\n            minHeight=\"32px\"\n            readOnly={readOnly}\n            minWidth={width}\n            pl={icon && '34px'}\n            pr={iconPaddingRight}\n            sx={{ ...getStyles(intent, isTextArea), ...sx }}\n            variant={readOnly ? 'disabled' : variant}\n            placeholder={placeholder}\n            {...props}\n          />{' '}\n          {icon && (\n            <GetIcon icon={icon} color=\"gray\" size=\"sm\" sx={getIconStyle} />\n          )}\n          {rightIcon && rightIcon}\n          {suffix && (\n            <Box sx={{ position: 'absolute', right: '8px', top: '9px' }}>\n              <Labeling fontSize=\"9px\" bold gray>\n                {suffix}\n              </Labeling>\n            </Box>\n          )}\n        </Box>\n        {info && <InputInfo intent={intent}>{info}</InputInfo>}\n      </Label>\n    );\n  },\n);\n\nexport default Input;\n"],"names":["getIntentColor","intent","inputIntents","getStyles","isTextArea","getIconStyle","Input","forwardRef","placeholder","label","labelAction","icon","rightIcon","info","iconPaddingRight","readOnly","width","labelProps","variant","type","rows","tooltipInfo","optional","sx","suffix","props","ref","actions","jsxs","Flex","jsx","Labeling","Tooltip","GetIcon","IconName","Label","Box","InputInfo"],"mappings":"kXAIA,MAAMA,EACHC,GACD,CAAC,CAAE,aAAAC,CAAa,IACdA,EAAaD,CAAM,GAAK,cAEtBE,EAAY,CAACF,EAAiBG,KAAsC,CACxE,MAAO,OAEP,YAAa,MACb,YAAa,QACb,YAAaJ,EAAeC,CAAM,EAElC,QAAS,OAET,GAAI,MACJ,GAAIG,EAAa,MAAQ,OAEzB,WAAY,iBAEZ,WAAY,OACZ,WAAY,OACZ,SAAU,OACV,WAAYA,EAAa,OAAS,OAElC,GAAIA,GAAc,CAAE,OAAQ,UAAW,CACzC,GAEaC,EAAe,CAC1B,KAAM,MACN,SAAU,WACV,IAAK,MACL,SAAU,MACZ,ECLAC,EAAAC,EAAA,WAAc,CAAA,CAEV,YAAAC,EACE,MAAAC,EAAA,GACQ,YAAAC,EACR,KAAAC,EACA,UAAAC,EACA,KAAAC,EACA,iBAAAC,EACA,SAAAC,EACA,MAAAC,EAAA,QACQ,WAAAC,EACR,QAAAC,EAAA,UACU,OAAAjB,EAAA,UACD,KAAAkB,EAAA,OACF,KAAAC,EAAA,EACA,YAAAC,EACP,SAAAC,EACA,GAAAC,EACA,OAAAC,EACA,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAtB,EAAAe,IAAA,WAEAQ,GAAAjB,GAAAW,GAAAC,IAAAM,OAAAC,EAAA,CAAA,SAAA,CAEKnB,EAAAY,GAAAQ,EAAA,IAAAC,EAAA,CAAA,GAAA,MAAA,KAAA,GAAA,KAAA,GAAA,SAAA,UAAA,CAAA,EAICV,GAAAS,EAAAA,IAAAE,EAAA,CAAA,SAAAX,EAAA,SAAAS,MAAAG,EAAA,CAAA,GAAA,MAAA,GAAA,MAAA,KAAA,KAAA,KAAAC,EAAA,UAAA,CAAA,EAAA,CAKA,CAAA,CAAA,EAKN,OAAAN,OAAAO,EAAA,CAAA,OAAAR,EAAA,KAAAlB,EAAA,MAAAO,EAAA,GAAAC,EAAA,SAAA,CAEIW,EAAA,KAAAQ,EAAC,CAAA,GAAA,CACK,SAAA,UACQ,EACZ,SAAA,CAEAN,EAAA,IAAAM,EAAC,CAAA,IAAAV,EACC,GAAAtB,EAAA,WAAA,QAC8B,KAAAe,EAC9B,GAAA,SACG,KAAAC,EACH,UAAA,OACU,SAAAL,EACV,SAAAC,EACU,GAAAL,GAAA,OACE,GAAAG,EACR,GAAA,CAAA,GAAAX,EAAAF,EAAAG,CAAA,EAAA,GAAAmB,CAAA,EAC0C,QAAAR,EAAA,WAAAG,EACb,YAAAV,EACjC,GAAAiB,CACI,CAAA,EACN,IAAGd,GAAAmB,EAAA,IAAAG,EAAA,CAAA,KAAAtB,EAAA,MAAA,OAAA,KAAA,KAAA,GAAAN,CAAA,CAAA,EAE6DO,GAAAA,EAElDY,GAAAM,EAAA,IAAAM,EAAA,CAAA,GAAA,CAAA,SAAA,WAAA,MAAA,MAAA,IAAA,KAAA,EAAA,SAAAN,EAAA,IAAAC,EAAA,CAAA,SAAA,MAAA,KAAA,GAAA,KAAA,GAAA,SAAAP,CAAA,CAAA,CAAA,CAAA,CAMZ,CAAA,CAAA,EAEJX,GAAAiB,EAAA,IAAAO,EAAA,CAAA,OAAApC,EAAA,SAAAY,EAAA,CAC0C,CAAA,CAAA,CAC5C,CAGN;;;;;"}
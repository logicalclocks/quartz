{"version":3,"file":"stories-f1f0bf77.js","sources":["../../node_modules/.pnpm/@chakra-ui+toast@7.0.2_@chakra-ui+system@2.6.2_framer-motion@10.12.18_react-dom@18.2.0_react@18.2.0/node_modules/@chakra-ui/toast/dist/chunk-FOFDA6UD.mjs","../../src/components/notifier/stories.tsx"],"sourcesContent":["'use client'\nimport {\n  ToastProvider\n} from \"./chunk-3Y4YXCR2.mjs\";\nimport {\n  createToastFn\n} from \"./chunk-HYCJNCPE.mjs\";\n\n// src/create-standalone-toast.tsx\nimport {\n  ColorModeContext,\n  ThemeProvider\n} from \"@chakra-ui/system\";\nimport { theme as defaultTheme } from \"@chakra-ui/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar defaults = {\n  duration: 5e3,\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {\n  },\n  setColorMode: () => {\n  },\n  defaultOptions: defaults,\n  forced: false\n};\nfunction createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n  motionVariants,\n  toastSpacing,\n  component,\n  forced\n} = defaultStandaloneParam) {\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced\n  };\n  const ToastContainer = () => /* @__PURE__ */ jsx(ThemeProvider, { theme, children: /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: colorModeContextValue, children: /* @__PURE__ */ jsx(\n    ToastProvider,\n    {\n      defaultOptions,\n      motionVariants,\n      toastSpacing,\n      component\n    }\n  ) }) });\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions)\n  };\n}\n\nexport {\n  defaultStandaloneParam,\n  createStandaloneToast\n};\n//# sourceMappingURL=chunk-FOFDA6UD.mjs.map","import type { Meta, StoryObj } from '@storybook/react';\nimport { userEvent, waitFor, within } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport { useRef } from 'react';\n\nimport { Box } from '../box';\nimport { Button } from '../button';\nimport { Flex } from '../flex';\nimport Value from '../typography/value';\nimport { INotification, createNotifier, useNotifier } from './notifier';\nimport { createStandaloneToast } from '../../chakra';\n\nconst meta: Meta<INotification> = {\n  title: 'Notifier',\n  args: {\n    title: 'Something happened',\n    content: 'You have to see it.',\n    duration: 5000,\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<INotification>;\n\nexport const Primary: Story = {\n  render: ({ title, content, duration }) => {\n    const notify = useNotifier();\n\n    const showSuccess = () => {\n      notify.success({\n        title: `Success: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showError = () => {\n      notify.error({\n        title: `Error: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showInfo = () => {\n      notify.info({\n        title: `Info: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showWarning = () => {\n      notify.warning({\n        title: `Warning: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    return (\n      <Flex flexDirection=\"column\" gap=\"20px\">\n        <Flex gap=\"20px\">\n          <Button intent=\"primary\" onClick={showSuccess}>\n            Success\n          </Button>\n          <Button intent=\"alert\" onClick={showError}>\n            Error\n          </Button>\n          <Button intent=\"secondary\" onClick={showInfo}>\n            Info\n          </Button>\n          <Button intent=\"ghost\" onClick={showWarning}>\n            Warning\n          </Button>\n        </Flex>\n        <Button intent=\"secondary\" onClick={() => notify.closeAll()}>\n          Clear all notifications\n        </Button>\n      </Flex>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const portal = within(document.querySelector('.chakra-portal')!);\n\n    userEvent.click(canvas.getByText('Success'));\n    expect(\n      await portal.findByText('Success: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Warning'));\n    expect(\n      await portal.findByText('Warning: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Info'));\n    expect(\n      await portal.findByText('Info: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Error'));\n    expect(\n      await portal.findByText('Error: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Clear all notifications'));\n    await waitFor(() =>\n      expect(portal.queryByText('Something happened')).not.toBeInTheDocument(),\n    );\n  },\n};\n\nexport const Error: Story = {\n  args: {\n    title: 'Error happened',\n  },\n  render: (args) => {\n    const notify = useNotifier();\n\n    const another = () => {\n      notify.error({\n        title: args.title,\n        content: args.content,\n        duration: args.duration,\n      });\n    };\n\n    return (\n      <Box>\n        <Button onClick={another}>Error</Button>\n      </Box>\n    );\n  },\n};\n\nexport const Success: Story = {\n  render: (args) => {\n    const notify = useNotifier();\n    const counter = useRef(1);\n\n    const another = () => {\n      notify.success({\n        title: `${args.title} ${counter.current}`,\n        content: args.content,\n        duration: args.duration,\n      });\n\n      counter.current += 1;\n    };\n\n    return (\n      <Box>\n        <Button onClick={another}>Success</Button>\n      </Box>\n    );\n  },\n};\n\nexport const PreventDuplicateNotifications: Story = {\n  render: (args) => {\n    const notify = useNotifier();\n\n    const showRegular = () => {\n      notify.info({\n        title: `Regular: ${args.title}`,\n        content: args.content,\n        duration: args.duration,\n      });\n    };\n\n    const showPrevented = () => {\n      notify.success({\n        title: `Prevents others: ${args.title}`,\n        content: args.content,\n        duration: args.duration,\n        uniqueId: 'just one id',\n      });\n    };\n\n    return (\n      <Flex flexDirection=\"column\" gap=\"1rem\">\n        <Value fontSize=\"18px\" width=\"300px\">\n          If you pass an ID to a notifier, it is going to prevent other\n          notifications with the same ID from being shown.\n        </Value>\n        <Flex gap=\"20px\">\n          <Button onClick={showRegular}>Regular</Button>\n          <Button onClick={showPrevented}>With ID given</Button>\n        </Flex>\n      </Flex>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const portal = within(document.querySelector('.chakra-portal')!);\n\n    userEvent.click(canvas.getByText('Regular'));\n    userEvent.click(canvas.getByText('Regular'));\n    userEvent.click(canvas.getByText('Regular'));\n    expect(await portal.findAllByText('You have to see it.')).toHaveLength(1);\n\n    userEvent.click(canvas.getByText('With ID given'));\n    userEvent.click(canvas.getByText('With ID given'));\n    userEvent.click(canvas.getByText('With ID given'));\n    expect(\n      await portal.findAllByText('Prevents others: Something happened'),\n    ).toHaveLength(1);\n  },\n};\n\nconst { ToastContainer, toast } = createStandaloneToast();\n\nexport const Standalone: Story = {\n  parameters: {\n    docs: {\n      source: `huy`,\n    },\n  },\n  render: ({ title, content, duration }) => {\n    const notifier = createNotifier(toast);\n\n    const showSuccess = () => {\n      notifier.success({\n        title: `Success: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showError = () => {\n      notifier.error({\n        title: `Error: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showInfo = () => {\n      notifier.info({\n        title: `Info: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    const showWarning = () => {\n      notifier.warning({\n        title: `Warning: ${title}`,\n        content,\n        duration,\n      });\n    };\n\n    return (\n      <Flex flexDirection=\"column\" gap=\"20px\">\n        <Value>This is for situations when you cannot use a hook.</Value>\n        <Button onClick={showSuccess}>Success</Button>\n        <Button intent=\"alert\" onClick={showError}>\n          Error\n        </Button>\n        <Button intent=\"secondary\" onClick={showInfo}>\n          Info\n        </Button>\n        <Button intent=\"ghost\" onClick={showWarning}>\n          Warning\n        </Button>\n        <Button intent=\"secondary\" onClick={() => notifier.closeAll()}>\n          Clear all notifications\n        </Button>\n        <ToastContainer />\n      </Flex>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const portal = within(document.querySelector('.chakra-portal')!);\n\n    userEvent.click(canvas.getByText('Success'));\n    expect(\n      await portal.findByText('Success: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Warning'));\n    expect(\n      await portal.findByText('Warning: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Info'));\n    expect(\n      await portal.findByText('Info: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Error'));\n    expect(\n      await portal.findByText('Error: Something happened'),\n    ).toBeInTheDocument();\n\n    userEvent.click(canvas.getByText('Clear all notifications'));\n    await waitFor(() =>\n      expect(portal.queryByText('Something happened')).not.toBeInTheDocument(),\n    );\n  },\n};\n"],"names":["defaults","defaultStandaloneParam","defaultTheme","createStandaloneToast","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","motionVariants","toastSpacing","component","forced","colorModeContextValue","jsx","ThemeProvider","ColorModeContext","ToastProvider","createToastFn","meta","Primary","title","content","duration","notify","useNotifier","showSuccess","showError","showInfo","showWarning","jsxs","Flex","Button","canvasElement","canvas","within","portal","userEvent","expect","waitFor","Error","args","another","Box","Success","counter","useRef","PreventDuplicateNotifications","showRegular","showPrevented","Value","ToastContainer","toast","Standalone","notifier","createNotifier"],"mappings":"m8CAeA,IAAIA,EAAW,CACb,SAAU,IACV,QAAS,OACX,EACIC,EAAyB,CAC3B,MAAOC,EACP,UAAW,QACX,gBAAiB,IAAM,CACtB,EACD,aAAc,IAAM,CACnB,EACD,eAAgBF,EAChB,OAAQ,EACV,EACA,SAASG,EAAsB,CAC7B,MAAAC,EAAQH,EAAuB,MAC/B,UAAAI,EAAYJ,EAAuB,UACnC,gBAAAK,EAAkBL,EAAuB,gBACzC,aAAAM,EAAeN,EAAuB,aACtC,eAAAO,EAAiBP,EAAuB,eACxC,eAAAQ,EACA,aAAAC,EACA,UAAAC,EACA,OAAAC,CACF,EAAIX,EAAwB,CAC1B,MAAMY,EAAwB,CAC5B,UAAAR,EACA,aAAAE,EACA,gBAAAD,EACA,OAAAM,CACJ,EAUE,MAAO,CACL,eAVqB,IAAsBE,EAAAA,IAAIC,EAAe,CAAE,MAAAX,EAAO,SAA0BU,MAAIE,EAAiB,SAAU,CAAE,MAAOH,EAAuB,SAA0BC,EAAG,IAC7LG,EACA,CACE,eAAAT,EACA,eAAAC,EACA,aAAAC,EACA,UAAAC,CACD,CACL,CAAK,CAAA,CAAG,CAAA,EAGJ,MAAOO,EAAcd,EAAM,UAAWI,CAAc,CACxD,CACA,CC/CA,MAAMW,GAA4B,CAChC,MAAO,WACP,KAAM,CACJ,MAAO,qBACP,QAAS,sBACT,SAAU,GACZ,CACF,EAMaC,GAAiB,CAC5B,OAAQ,CAAC,CAAE,MAAAC,EAAO,QAAAC,EAAS,SAAAC,KAAe,CACxC,MAAMC,EAASC,IAETC,EAAc,IAAM,CACxBF,EAAO,QAAQ,CACb,MAAO,YAAYH,CAAK,GACxB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGI,EAAY,IAAM,CACtBH,EAAO,MAAM,CACX,MAAO,UAAUH,CAAK,GACtB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGK,EAAW,IAAM,CACrBJ,EAAO,KAAK,CACV,MAAO,SAASH,CAAK,GACrB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGM,EAAc,IAAM,CACxBL,EAAO,QAAQ,CACb,MAAO,YAAYH,CAAK,GACxB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGH,OACGO,EAAAA,KAAAC,EAAA,CAAK,cAAc,SAAS,IAAI,OAC/B,SAAA,CAACD,EAAAA,KAAAC,EAAA,CAAK,IAAI,OACR,SAAA,CAAAjB,MAACkB,EAAO,CAAA,OAAO,UAAU,QAASN,EAAa,SAE/C,UAAA,QACCM,EAAO,CAAA,OAAO,QAAQ,QAASL,EAAW,SAE3C,QAAA,QACCK,EAAO,CAAA,OAAO,YAAY,QAASJ,EAAU,SAE9C,OAAA,QACCI,EAAO,CAAA,OAAO,QAAQ,QAASH,EAAa,SAE7C,UAAA,CAAA,EACF,EACAf,EAAAA,IAACkB,GAAO,OAAO,YAAY,QAAS,IAAMR,EAAO,SAAS,EAAG,SAE7D,yBAAA,CAAA,CACF,CAAA,CAAA,CAEJ,EACA,KAAM,MAAO,CAAE,cAAAS,KAAoB,CAC3B,MAAAC,EAASC,EAAOF,CAAa,EAC7BG,EAASD,EAAO,SAAS,cAAc,gBAAgB,CAAE,EAE/DE,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CI,EACE,MAAMF,EAAO,WAAW,6BAA6B,GACrD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CI,EACE,MAAMF,EAAO,WAAW,6BAA6B,GACrD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,MAAM,CAAC,EACxCI,EACE,MAAMF,EAAO,WAAW,0BAA0B,GAClD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,OAAO,CAAC,EACzCI,EACE,MAAMF,EAAO,WAAW,2BAA2B,GACnD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,yBAAyB,CAAC,EACrD,MAAAK,EAAQ,IACZD,EAAOF,EAAO,YAAY,oBAAoB,CAAC,EAAE,IAAI,kBAAkB,CAAA,CAE3E,CACF,EAEaI,GAAe,CAC1B,KAAM,CACJ,MAAO,gBACT,EACA,OAASC,GAAS,CAChB,MAAMjB,EAASC,IAETiB,EAAU,IAAM,CACpBlB,EAAO,MAAM,CACX,MAAOiB,EAAK,MACZ,QAASA,EAAK,QACd,SAAUA,EAAK,QAAA,CAChB,CAAA,EAGH,aACGE,EACC,CAAA,SAAA7B,EAAA,IAACkB,GAAO,QAASU,EAAS,gBAAK,CAAA,CACjC,CAAA,CAEJ,CACF,EAEaE,GAAiB,CAC5B,OAASH,GAAS,CAChB,MAAMjB,EAASC,IACToB,EAAUC,SAAO,CAAC,EAElBJ,EAAU,IAAM,CACpBlB,EAAO,QAAQ,CACb,MAAO,GAAGiB,EAAK,KAAK,IAAII,EAAQ,OAAO,GACvC,QAASJ,EAAK,QACd,SAAUA,EAAK,QAAA,CAChB,EAEDI,EAAQ,SAAW,CAAA,EAGrB,aACGF,EACC,CAAA,SAAA7B,EAAA,IAACkB,GAAO,QAASU,EAAS,kBAAO,CAAA,CACnC,CAAA,CAEJ,CACF,EAEaK,GAAuC,CAClD,OAASN,GAAS,CAChB,MAAMjB,EAASC,IAETuB,EAAc,IAAM,CACxBxB,EAAO,KAAK,CACV,MAAO,YAAYiB,EAAK,KAAK,GAC7B,QAASA,EAAK,QACd,SAAUA,EAAK,QAAA,CAChB,CAAA,EAGGQ,EAAgB,IAAM,CAC1BzB,EAAO,QAAQ,CACb,MAAO,oBAAoBiB,EAAK,KAAK,GACrC,QAASA,EAAK,QACd,SAAUA,EAAK,SACf,SAAU,aAAA,CACX,CAAA,EAGH,OACGX,EAAAA,KAAAC,EAAA,CAAK,cAAc,SAAS,IAAI,OAC/B,SAAA,CAAAjB,MAACoC,EAAM,CAAA,SAAS,OAAO,MAAM,QAAQ,SAGrC,iHAAA,EACApB,EAAAA,KAACC,EAAK,CAAA,IAAI,OACR,SAAA,CAACjB,EAAA,IAAAkB,EAAA,CAAO,QAASgB,EAAa,SAAO,UAAA,EACpClC,EAAA,IAAAkB,EAAA,CAAO,QAASiB,EAAe,SAAa,gBAAA,CAAA,EAC/C,CACF,CAAA,CAAA,CAEJ,EACA,KAAM,MAAO,CAAE,cAAAhB,KAAoB,CAC3B,MAAAC,EAASC,EAAOF,CAAa,EAC7BG,EAASD,EAAO,SAAS,cAAc,gBAAgB,CAAE,EAE/DE,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CG,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CG,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CI,EAAO,MAAMF,EAAO,cAAc,qBAAqB,CAAC,EAAE,aAAa,CAAC,EAExEC,EAAU,MAAMH,EAAO,UAAU,eAAe,CAAC,EACjDG,EAAU,MAAMH,EAAO,UAAU,eAAe,CAAC,EACjDG,EAAU,MAAMH,EAAO,UAAU,eAAe,CAAC,EACjDI,EACE,MAAMF,EAAO,cAAc,qCAAqC,CAAA,EAChE,aAAa,CAAC,CAClB,CACF,EAEM,CAAE,eAAAe,EAAgB,MAAAC,GAAUjD,IAErBkD,GAAoB,CAC/B,WAAY,CACV,KAAM,CACJ,OAAQ,KACV,CACF,EACA,OAAQ,CAAC,CAAE,MAAAhC,EAAO,QAAAC,EAAS,SAAAC,KAAe,CAClC,MAAA+B,EAAWC,EAAeH,CAAK,EAE/B1B,EAAc,IAAM,CACxB4B,EAAS,QAAQ,CACf,MAAO,YAAYjC,CAAK,GACxB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGI,EAAY,IAAM,CACtB2B,EAAS,MAAM,CACb,MAAO,UAAUjC,CAAK,GACtB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGK,EAAW,IAAM,CACrB0B,EAAS,KAAK,CACZ,MAAO,SAASjC,CAAK,GACrB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGGM,EAAc,IAAM,CACxByB,EAAS,QAAQ,CACf,MAAO,YAAYjC,CAAK,GACxB,QAAAC,EACA,SAAAC,CAAA,CACD,CAAA,EAGH,OACGO,EAAAA,KAAAC,EAAA,CAAK,cAAc,SAAS,IAAI,OAC/B,SAAA,CAAAjB,EAAAA,IAACoC,GAAM,SAAkD,oDAAA,CAAA,EACxDpC,EAAA,IAAAkB,EAAA,CAAO,QAASN,EAAa,SAAO,UAAA,QACpCM,EAAO,CAAA,OAAO,QAAQ,QAASL,EAAW,SAE3C,QAAA,QACCK,EAAO,CAAA,OAAO,YAAY,QAASJ,EAAU,SAE9C,OAAA,QACCI,EAAO,CAAA,OAAO,QAAQ,QAASH,EAAa,SAE7C,UAAA,EACAf,EAAAA,IAACkB,GAAO,OAAO,YAAY,QAAS,IAAMsB,EAAS,SAAS,EAAG,SAE/D,yBAAA,CAAA,QACCH,EAAe,EAAA,CAClB,CAAA,CAAA,CAEJ,EACA,KAAM,MAAO,CAAE,cAAAlB,KAAoB,CAC3B,MAAAC,EAASC,EAAOF,CAAa,EAC7BG,EAASD,EAAO,SAAS,cAAc,gBAAgB,CAAE,EAE/DE,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CI,EACE,MAAMF,EAAO,WAAW,6BAA6B,GACrD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,SAAS,CAAC,EAC3CI,EACE,MAAMF,EAAO,WAAW,6BAA6B,GACrD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,MAAM,CAAC,EACxCI,EACE,MAAMF,EAAO,WAAW,0BAA0B,GAClD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,OAAO,CAAC,EACzCI,EACE,MAAMF,EAAO,WAAW,2BAA2B,GACnD,kBAAkB,EAEpBC,EAAU,MAAMH,EAAO,UAAU,yBAAyB,CAAC,EACrD,MAAAK,EAAQ,IACZD,EAAOF,EAAO,YAAY,oBAAoB,CAAC,EAAE,IAAI,kBAAkB,CAAA,CAE3E,CACF","x_google_ignoreList":[0]}
import{a as r,c as z,j as e,B as n}from"./index.esm-d48b4efe.js";import{r as N}from"./index-8db94870.js";import{L as C}from"./index-b07c14d7.js";import{I as L}from"./index-38fb6861.js";import{L as y}from"./labeling-12ecbbe1.js";import{T as P}from"./index-b3448287.js";import"./index-0330c98f.js";import{G as h}from"./GetIcon-9cceefbc.js";import{I as R}from"./list-ae21c2ea.js";const j=l=>({inputIntents:a})=>a[l]??"transparent",E=(l,a)=>({width:"100%",borderWidth:"1px",borderStyle:"solid",borderColor:j(l),outline:"none",px:"8px",pt:a?"4px":void 0,transition:"all 0.25s ease",fontFamily:"text",fontWeight:"text",fontSize:"text",lineHeight:a?"20px":"28px",...a&&{resize:"vertical"}}),T={left:"8px",position:"absolute",top:"8px",fontSize:"14px"},D=N.forwardRef(({placeholder:l,label:a="",labelAction:i,icon:t,rightIcon:o,info:v,iconPaddingRight:g,readOnly:s,width:p="180px",labelProps:b,variant:q="primary",intent:d="default",type:m="text",rows:V=3,tooltipInfo:u,optional:c,sx:w,suffix:f,...I},S)=>{const x=m==="textarea",_=(i||u||c)&&r(z,{children:[i,c&&e(y,{ml:"8px",bold:!0,gray:!0,children:"optional"}),u&&e(P,{mainText:u,children:e(h,{ml:"3px",mt:"3px",size:"xs",icon:R.info_block})})]});return r(C,{action:_,text:a,width:p,...b,children:[r(n,{sx:{position:"relative"},children:[e(n,{ref:S,as:x?"textarea":"input",type:m,tx:"inputs",rows:V,minHeight:"32px",readOnly:s,minWidth:p,pl:t&&"34px",pr:g,sx:{...E(d,x),...w},variant:s?"disabled":q,placeholder:l,...I})," ",t&&e(h,{icon:t,color:"gray",size:"sm",sx:T}),o&&o,f&&e(n,{sx:{position:"absolute",right:"8px",top:"9px"},children:e(y,{fontSize:"9px",bold:!0,gray:!0,children:f})})]}),v&&e(L,{intent:d,children:v})]})});try{input.displayName="input",input.__docgenInfo={description:"",displayName:"input",props:{variant:{defaultValue:{value:"primary"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"white"'},{value:'"primary"'}]}},intent:{defaultValue:{value:"default"},description:"",name:"intent",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'}]}},info:{defaultValue:null,description:"",name:"info",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"enum",value:[{value:"0"},{value:"1"},{value:"2"},{value:"3"},{value:"4"},{value:"5"},{value:"6"},{value:"7"},{value:"8"},{value:"9"},{value:"10"},{value:"11"},{value:"12"},{value:"13"},{value:"14"},{value:"15"},{value:"16"},{value:"17"},{value:"18"},{value:"19"},{value:"20"},{value:"21"},{value:"22"},{value:"23"},{value:"24"},{value:"25"},{value:"26"},{value:"27"},{value:"28"},{value:"29"},{value:"30"},{value:"31"},{value:"32"},{value:"33"},{value:"34"},{value:"35"},{value:"36"},{value:"37"},{value:"38"},{value:"39"},{value:"40"},{value:"41"},{value:"42"},{value:"43"},{value:"44"},{value:"45"},{value:"46"},{value:"47"},{value:"48"},{value:"49"},{value:"50"},{value:"51"},{value:"52"},{value:"53"},{value:"54"},{value:"55"},{value:"56"},{value:"57"},{value:"58"},{value:"59"},{value:"60"},{value:"61"},{value:"62"},{value:"63"},{value:"64"},{value:"65"},{value:"66"},{value:"67"},{value:"68"},{value:"69"},{value:"70"},{value:"71"},{value:"72"},{value:"73"},{value:"74"},{value:"75"},{value:"76"},{value:"77"},{value:"78"},{value:"79"},{value:"80"},{value:"81"},{value:"82"},{value:"83"},{value:"84"},{value:"85"},{value:"86"},{value:"87"},{value:"88"},{value:"89"},{value:"90"},{value:"91"},{value:"92"}]}},rightIcon:{defaultValue:null,description:"",name:"rightIcon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},suffix:{defaultValue:null,description:"",name:"suffix",required:!1,type:{name:"string"}},iconPaddingRight:{defaultValue:null,description:"",name:"iconPaddingRight",required:!1,type:{name:"string"}},label:{defaultValue:{value:""},description:"",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},width:{defaultValue:{value:"180px"},description:`The width utility parses a component's \`width\` prop and converts it into a CSS width declaration.

- Numbers from 0-1 are converted to percentage widths.
- Numbers greater than 1 are converted to pixel values.
- String values are passed as raw CSS values.
- And arrays are converted to responsive width styles.`,name:"width",required:!1,type:{name:"string | number"}},labelProps:{defaultValue:null,description:"",name:"labelProps",required:!1,type:{name:'Omit<LabelProps, "action" | "children" | "text">'}},labelAction:{defaultValue:null,description:"",name:"labelAction",required:!1,type:{name:"ReactNode"}},type:{defaultValue:{value:"text"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"textarea"'},{value:'"text"'},{value:'"password"'}]}},rows:{defaultValue:{value:"3"},description:"",name:"rows",required:!1,type:{name:"number"}},optional:{defaultValue:null,description:"",name:"optional",required:!1,type:{name:"boolean"}},tooltipInfo:{defaultValue:null,description:"",name:"tooltipInfo",required:!1,type:{name:"string"}}}}}catch{}export{D as I};
//# sourceMappingURL=index-23f3bbf5.js.map

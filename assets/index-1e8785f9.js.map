{"version":3,"file":"index-1e8785f9.js","sources":["../../src/components/file-system-explorer/header/file-explorer-header.styles.ts","../../src/components/file-system-explorer/header/index.tsx","../../src/components/file-system-explorer/file-explorer-column/index.tsx","../../src/components/file-system-explorer/info/file-explorer-info.styles.ts","../../src/utils/getFormatSizeUnit.ts","../../src/components/file-system-explorer/info/index.tsx","../../src/components/file-system-explorer/empty-folder-info/empty-folder-info.styles.ts","../../src/components/file-system-explorer/empty-folder-info/index.tsx","../../src/components/file-system-explorer/file-system-explorer.styles.ts","../../src/components/file-system-explorer/index.tsx"],"sourcesContent":["export default {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'start',\n  justifyContent: 'center',\n\n  minHeight: '62px',\n  width: '100%',\n\n  px: '20px',\n  pt: '20px',\n\n  boxSizing: 'border-box',\n\n  // Title\n  '> h4': {\n    fontFamily: 'subtitle',\n    fontWeight: 'subtitle',\n    fontSize: 'subtitle',\n  },\n\n  // Shortcut\n\n  '> div': {\n    marginLeft: 0,\n  },\n};\n","import React, { FC } from 'react';\nimport { Box, BoxProps, Flex } from 'rebass';\n\n// Styles\nimport style from './file-explorer-header.styles';\n\nexport interface FileExplorerHeaderProps\n  extends Omit<BoxProps, 'css' | 'action'> {\n  shortcutActions?: React.ReactNode;\n  title?: string;\n}\n\nconst FileExplorerHeader: FC<FileExplorerHeaderProps> = ({\n  title,\n  shortcutActions,\n}: FileExplorerHeaderProps) => {\n  return (\n    <Box sx={{ ...style }}>\n      {title && <Flex as=\"h4\">{title}</Flex>}\n      {shortcutActions && (\n        <div\n          style={{\n            paddingTop: 20,\n          }}\n        >\n          {shortcutActions}\n        </div>\n      )}\n    </Box>\n  );\n};\n\nexport default FileExplorerHeader;\n","import React, { FC, useState } from 'react';\nimport { Box, BoxProps } from 'rebass';\n\nimport FolderItemExplorer from '../folder';\nimport FileItemExplorer from '../file-item-explorer/FileItemExplorer';\nimport { FileExplorData, FileExplorerMode } from '../types';\n\nexport interface FileExplorerColumnProps\n  extends Omit<BoxProps, 'css' | 'action'> {\n  items: FileExplorData[];\n  setColumns?: any;\n  mode?: FileExplorerMode;\n  index: number;\n  setActiveFile?: object;\n  handleLoadMore: (path: string, columnIndex: number) => void;\n  isFileSelected?: any;\n  selectPathListValue?: any;\n  fileListValue?: any[];\n  validExtensions?: string[];\n  setIsEmptyFolder: (value: boolean) => void;\n}\n\nconst FileExplorerColumn: FC<FileExplorerColumnProps> = ({\n  items,\n  mode,\n  index,\n  setColumns,\n  setActiveFile,\n  isFileSelected,\n  handleLoadMore,\n  selectPathListValue,\n  fileListValue,\n  validExtensions,\n  setIsEmptyFolder,\n}: FileExplorerColumnProps) => {\n  const [activeFolder, setActiveFolder] = useState(0);\n\n  return (\n    <Box\n      sx={{\n        width: '225px',\n        minWidth: '225px',\n        borderRightColor: 'grayShade1',\n        borderRightWidth: '3px',\n        borderRightStyle: 'solid',\n        backgroundColor: 'grayShade3',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n      }}\n    >\n      {items.map((item: FileExplorData) => {\n        const isValidExtension = () => {\n          if (!validExtensions || validExtensions?.length === 0) return true;\n          const splits = item.attributes.name.split('.');\n          const extension = splits[splits.length - 1];\n          return validExtensions.includes(`.${extension}`);\n        };\n\n        if (item) {\n          if (item.attributes.dir) {\n            return (\n              <FolderItemExplorer\n                key={item.attributes.id}\n                index={index}\n                id={item.attributes.id}\n                handleLoadMore={handleLoadMore}\n                mode={mode}\n                name={item.attributes.name}\n                itemInfo={item}\n                selectPathListValue={selectPathListValue}\n                setColumns={setColumns}\n                setActiveFile={setActiveFile}\n                activeFolder={activeFolder}\n                setActiveFolder={setActiveFolder}\n                isActive={false}\n                selected={false}\n              />\n            );\n          }\n          return (\n            <FileItemExplorer\n              index={index}\n              key={item.attributes.id}\n              mode={mode}\n              setColumns={setColumns}\n              isFileSelected={isFileSelected}\n              setActiveFile={setActiveFile}\n              setActiveFolder={setActiveFolder}\n              itemInfo={item}\n              isActive={\n                fileListValue\n                  ? fileListValue.includes(item.attributes.name)\n                  : false\n              }\n              selected={\n                fileListValue\n                  ? fileListValue.includes(item.attributes.name)\n                  : false\n              }\n              isValidExtension={isValidExtension()}\n              setIsEmptyFolder={setIsEmptyFolder}\n            />\n          );\n        }\n        return null;\n      })}\n    </Box>\n  );\n};\n\nexport default FileExplorerColumn;\n","export const FileExplorerInfoStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  backgroundColor: 'white',\n  minHeight: '62px',\n  width: '100%',\n  minWidth: '230px',\n\n  p: '20px',\n\n  boxSizing: 'border-box',\n};\n\nexport const blockInfoStyles = {\n  display: 'flex',\n  flexDirection: 'column',\n  'div:first-of-type': { justifyContent: 'center' },\n  ' > div > span': {\n    color: 'black',\n    marginLeft: 0,\n  },\n  '>h2': {\n    fontFamily: 'subtitle',\n    fontWeight: 'subtitle',\n    fontSize: 'subtitle',\n  },\n};\n\nexport const contentInfoStyles = (side: boolean) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  maxWidth: side ? '80px' : '180px',\n  textAlign: side ? 'right' : 'left',\n  marginRight: '4px',\n  div: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    marginBottom: '8px',\n    fontFamily: side ? 'microlabel' : 'value',\n    fontWeight: side ? 'microlabel' : 'value',\n    fontSize: side ? 'microlabel' : 'value',\n  },\n  'div:nth-last-of-type(3)': {\n    paddingBottom: '7px',\n  },\n  'div:nth-last-of-type(2)': {\n    paddingBottom: '5px',\n  },\n  'div:last-child': {\n    height: '16px',\n    paddingBottom: '2px',\n  },\n  'div:first-of-typed': {\n    height: 'auto',\n  },\n});\n","const formatSizeUnits = (bytes: number) => {\n  if (bytes >= 1073741824) {\n    return `${(bytes / 1073741824).toFixed(2)} Gb`;\n  }\n  if (bytes >= 1048576) {\n    return `${(bytes / 1048576).toFixed(2)} mb`;\n  }\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(2)} kb`;\n  }\n  if (bytes > 1) {\n    return `${bytes} bytes`;\n  }\n  if (bytes === 1) {\n    return `${bytes} byte`;\n  }\n  return '0 byte';\n};\n\nexport default formatSizeUnits;\n","import React, { FC } from 'react';\nimport { Box, BoxProps, Flex } from 'rebass';\n\nimport { format } from 'date-fns';\nimport Value from '../../typography/value';\n\nimport {\n  FileExplorerInfoStyle,\n  blockInfoStyles,\n  contentInfoStyles,\n} from './file-explorer-info.styles';\nimport Labeling from '../../typography/labeling';\nimport { ActiveFile } from '../types';\nimport { Button } from '../../button';\nimport formatSizeUnits from '../../../utils/getFormatSizeUnit';\nimport { GetIcon, IconName } from '../../icon';\n\nexport interface FileExplorerInfoProps extends Omit<BoxProps, 'css'> {\n  children?: string[];\n  activeFile?: ActiveFile | null;\n  disableDownload: boolean;\n  handleDownloadFile: (file: any) => void;\n}\n\nconst FileExplorerInfo: FC<FileExplorerInfoProps> = ({\n  children,\n  activeFile,\n  disableDownload,\n  handleDownloadFile,\n}: FileExplorerInfoProps) => {\n  const dateFormat = (date: string) => {\n    // eslint-disable-next-line\n    return format(new Date(date), 'yyyy-MM-dd - HH:mm:ss');\n  };\n\n  return (\n    <Box\n      sx={{\n        ...FileExplorerInfoStyle,\n      }}\n    >\n      <Box\n        sx={{\n          ...blockInfoStyles,\n        }}\n      >\n        <Value as=\"h2\" marginBottom=\"32px\" textAlign=\"center\">\n          {activeFile?.attributes.name}\n        </Value>\n        <Flex\n          sx={{\n            '> div > div': {\n              height: '30px',\n            },\n          }}\n        >\n          <Box\n            sx={{\n              ...contentInfoStyles(true),\n            }}\n          >\n            <Labeling gray>size</Labeling>\n            <Labeling gray>creation</Labeling>\n            <Labeling gray>last update</Labeling>\n            <Labeling gray>author</Labeling>\n          </Box>\n          {activeFile && (\n            <Box\n              sx={{\n                ...contentInfoStyles(false),\n              }}\n            >\n              <Labeling>\n                {formatSizeUnits(activeFile?.attributes.size)}\n              </Labeling>\n              <Labeling>\n                {dateFormat(activeFile?.attributes.accessTime)}\n              </Labeling>\n              <Labeling>\n                {dateFormat(activeFile?.attributes.modificationTime)}\n              </Labeling>\n              <Labeling>{activeFile?.attributes.owner}</Labeling>\n            </Box>\n          )}\n        </Flex>\n      </Box>\n      {!disableDownload && (\n        <Button\n          intent=\"secondary\"\n          onClick={() => {\n            handleDownloadFile(activeFile);\n          }}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"center\">\n            <Flex\n              sx={{\n                mr: '11px',\n                height: '15px',\n                alignItems: 'center',\n              }}\n            >\n              <GetIcon size=\"sm\" icon={IconName.folder} />\n            </Flex>\n            <Flex alignItems=\"center\">Download File</Flex>\n          </Flex>\n        </Button>\n      )}\n\n      {children}\n    </Box>\n  );\n};\n\nexport default FileExplorerInfo;\n","export default {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  backgroundColor: 'white',\n  minHeight: '62px',\n  width: '100%',\n  minWidth: '230px',\n  p: '20px',\n  boxSizing: 'border-box',\n  '>h2': {\n    fontFamily: 'subtitle',\n    fontWeight: 'subtitle',\n    fontSize: 'subtitle',\n    color: 'gray',\n  },\n};\n","import React, { FC } from 'react';\nimport { Box, BoxProps } from 'rebass';\nimport Value from '../../typography/value';\nimport styles from './empty-folder-info.styles';\n\nexport interface EmptyFolderInfoProps extends Omit<BoxProps, 'css'> {}\n\nconst EmptyFolderInfo: FC<EmptyFolderInfoProps> = () => (\n  <Box sx={styles}>\n    <Value as=\"h2\" textAlign=\"center\">\n      Empty folder\n    </Value>\n  </Box>\n);\n\nexport default EmptyFolderInfo;\n","import { SxStyleProp } from 'rebass';\nimport { ITheme } from '../../theme/types';\n\nexport const fileExplorerHeaderStyles = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'start',\n  justifyContent: 'center',\n  height: '62px',\n  minHeight: '62px',\n  width: '100%',\n\n  px: '20px',\n\n  boxSizing: 'border-box',\n\n  borderBottomWidth: '1px',\n  borderBottomStyle: 'solid',\n  // @ts-ignore\n  borderBottomColor: ({ variants }: ITheme) => variants?.card?.borderColor,\n\n  boxShadow: '0px 10px 40px -20px rgba(0, 0, 0, 0.15)',\n\n  // Title\n  '> h4': {\n    fontFamily: 'subtitle',\n    fontWeight: 'subtitle',\n    fontSize: 'subtitle',\n  },\n};\n\nexport default {\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  maxHeight: 'calc(100vh - 110px)',\n  borderWidth: '1px',\n  borderBottomWidth: '0px',\n  borderStyle: 'solid',\n  boxSizing: 'border-box',\n} as SxStyleProp;\n","import React, { FC, memo, useEffect, useRef, useState } from 'react';\nimport {\n  Box,\n  Card as RebassCard,\n  CardProps as RebassCardProps,\n  Flex,\n} from 'rebass';\n\nimport Footer from './footer';\nimport Header from './header';\nimport FileExplorerColumn from './file-explorer-column';\nimport Info from './info';\nimport EmptyFolderInfo from './empty-folder-info';\nimport { ActiveFile, FileExplorData, FileExplorerMode } from './types';\n\n// Styles\nimport styles from './file-system-explorer.styles';\n\nexport interface FileSystemExplorerProps\n  extends Omit<RebassCardProps, 'css' | 'title' | 'data'> {\n  title?: string;\n  mode?: FileExplorerMode;\n  data: FileExplorData[][];\n  disableDownload?: boolean;\n  validExtensions?: string[];\n  rootDir?: string;\n  handleLoadMore: (path: string, columnIndex: number) => void;\n  shortcutActions?: React.ReactNode;\n  contentProps?: Omit<RebassCardProps, 'css' | 'children'>;\n  onClose: (key: any) => void;\n  handleSelectFile?: (activeFile: any, isDownload: boolean) => void;\n  handleDownloadFile: (file: any) => void;\n}\n\nconst FileSystemExplorer: FC<FileSystemExplorerProps> = ({\n  title = 'Select a file',\n  onClose = () => console.log('Close'),\n  shortcutActions,\n  handleDownloadFile,\n  mode = FileExplorerMode.oneFile,\n  rootDir = '/',\n  contentProps,\n  handleLoadMore = () => console.log('load more in quartz'),\n  handleSelectFile = () => console.log('handleSelectFile in quartz'),\n  disableDownload = false,\n  validExtensions,\n  data,\n  ...props\n}: FileSystemExplorerProps) => {\n  const contentRef = useRef<HTMLDivElement>();\n\n  const [columns, setColumns] = useState(data);\n  const [isEmptyFolder, setIsEmptyFolder] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (Array.isArray(data)) {\n      const lastElement = data[data.length - 1];\n\n      if (Array.isArray(lastElement) && lastElement.length === 0) {\n        // if last element's length is 0, consider it is empty folder\n        setIsEmptyFolder(true);\n        setColumns(data.slice(0, -1));\n      } else {\n        setIsEmptyFolder(false);\n        setColumns(data);\n      }\n    }\n  }, [data]);\n\n  const [activeFile, setActiveFile] = useState<ActiveFile>();\n  const [fileListValue, setFileListValue] = useState<any[]>([]);\n  const [pathListValue, setPathListValue] = useState<string>('');\n  const lastChildOfColumn = useRef<any>();\n  const scrollToRight = () => {\n    if (lastChildOfColumn) lastChildOfColumn.current.scrollIntoView();\n  };\n\n  const isFileSelected = (item: any, action: boolean) => {\n    if (action) {\n      setFileListValue((prevState: any[]): any[] => [...prevState, item]);\n    } else {\n      setFileListValue((prevState: any[]): any[] => [\n        ...prevState.filter((name) => name !== item.attributes.name),\n      ]);\n    }\n  };\n\n  const selectPathListValue = (path: string, isFolder: boolean) => {\n    if (!isFolder) {\n      setPathListValue(path);\n    }\n    setPathListValue(path);\n  };\n\n  useEffect(() => {\n    scrollToRight();\n  }, [columns]);\n\n  return (\n    <RebassCard {...props} sx={styles}>\n      <Header shortcutActions={shortcutActions} title={title} />\n      <Flex\n        sx={{\n          flex: 1,\n          borderStyle: 'solid',\n          borderColor: 'grayShade3',\n          borderWidth: '1px',\n          overflowX: 'auto',\n          backgroundColor: 'grayShade3',\n        }}\n        ref={contentRef}\n        height=\"100%\"\n        minWidth=\"965px\"\n        m=\"20px\"\n        {...contentProps}\n      >\n        {columns.map((el, index: any) => (\n          <FileExplorerColumn\n            items={el}\n            validExtensions={validExtensions}\n            handleLoadMore={handleLoadMore}\n            setActiveFile={setActiveFile}\n            mode={mode}\n            setColumns={setColumns}\n            index={index}\n            isFileSelected={isFileSelected}\n            selectPathListValue={selectPathListValue}\n            fileListValue={fileListValue}\n            setIsEmptyFolder={setIsEmptyFolder}\n          />\n        ))}\n        {isEmptyFolder && <EmptyFolderInfo />}\n        {activeFile && (\n          <Info\n            activeFile={activeFile}\n            disableDownload={disableDownload}\n            handleDownloadFile={handleDownloadFile}\n          />\n        )}\n        <Box ref={lastChildOfColumn} />\n      </Flex>\n      <Footer\n        onClose={onClose}\n        fileListValue={fileListValue}\n        value={pathListValue}\n        activeFile={activeFile}\n        mode={mode}\n        handleSelectFile={handleSelectFile}\n        rootDir={rootDir}\n      />\n    </RebassCard>\n  );\n};\n\nexport default memo(FileSystemExplorer);\n"],"names":["style","FileExplorerHeader","title","shortcutActions","jsxs","Box","jsx","Flex","FileExplorerColumn","items","mode","index","setColumns","setActiveFile","isFileSelected","handleLoadMore","selectPathListValue","fileListValue","validExtensions","setIsEmptyFolder","activeFolder","setActiveFolder","useState","item","isValidExtension","splits","extension","FolderItemExplorer","FileItemExplorer","FileExplorerInfoStyle","blockInfoStyles","contentInfoStyles","side","formatSizeUnits","bytes","FileExplorerInfo","children","activeFile","disableDownload","handleDownloadFile","dateFormat","date","format","Value","Labeling","Button","GetIcon","IconName","styles$1","EmptyFolderInfo","styles","FileSystemExplorer","onClose","FileExplorerMode","rootDir","contentProps","handleSelectFile","data","props","contentRef","useRef","columns","isEmptyFolder","useEffect","lastElement","setFileListValue","pathListValue","setPathListValue","lastChildOfColumn","scrollToRight","action","prevState","name","path","isFolder","RebassCard","Header","el","Info","Footer","FileSystemExplorer$1","memo"],"mappings":"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"}
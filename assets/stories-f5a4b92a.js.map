{"version":3,"file":"stories-f5a4b92a.js","sources":["../../src/components/table/stories.tsx"],"sourcesContent":["import * as R from 'ramda';\nimport { useCallback, useState } from 'react';\nimport { StoryObj, Meta } from '@storybook/react';\n\nimport { Box } from 'rebass';\nimport Table from './index';\nimport ReadOnlyTable from './read-only';\n\nimport dummyValues from './read-only/dummydata.json';\nimport dummyValuesEditable from './editable/dummydata.json';\nimport EditableTable from './editable';\nimport { Button, Checkbox, Select } from '../../index';\nimport BlurInput from './editable/blur-input';\nimport {\n  TableCellRenderProps,\n  TableCellType,\n  TableHeader,\n  TableRowComponent,\n} from './type';\nimport { EditableTable2 } from './editable/EditableTable2';\n\nconst meta: Meta<typeof Table> = {\n  title: 'Tables',\n  component: Table,\n\n  argTypes: {\n    variant: {\n      control: {\n        type: 'select',\n        options: ['read-only'],\n      },\n      description: 'Type of table',\n      defaultValue: { summary: 'read-only' },\n    },\n  },\n};\nexport default meta;\n\nconst headers = [\n  {\n    identifier: { name: 'away_team_id' },\n  },\n  {\n    identifier: { name: 'score' },\n  },\n  {\n    identifier: { name: 'dummycolumn_test1' },\n  },\n  {\n    identifier: { name: 'dummycolumn_test2' },\n  },\n  {\n    identifier: { name: 'home_team_id' },\n  },\n];\n\nexport const ReadOnly: StoryObj<typeof ReadOnlyTable> = {\n  args: {\n    values: dummyValues,\n    columnHeaders: headers,\n  },\n  render: (props) => {\n    return (\n      <Box>\n        <ReadOnlyTable\n          {...props}\n          initialStaticColumn=\"score\"\n          actions={[\n            {\n              label: 'go to stats',\n              handler: (column) => {\n                console.log(`go to stats of ${column}`);\n              },\n            },\n          ]}\n        />\n      </Box>\n    );\n  },\n};\n\nconst rowComponents: TableRowComponent[] = [\n  {\n    identifier: { name: 'away_team_id' },\n    render: ({ value, onChange, onBlur }) => (\n      <BlurInput\n        defaultValue={value as string}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n    ),\n  },\n  {\n    identifier: { name: 'score' },\n    render: ({ value, onChange, onBlur }) => {\n      const handleChange = () => {\n        onChange(!(value as boolean));\n      };\n\n      return (\n        <Checkbox\n          ml=\"8px\"\n          checked={value as boolean}\n          onChange={handleChange}\n          variant=\"gray\"\n          onBlur={onBlur}\n        />\n      );\n    },\n  },\n  {\n    identifier: { name: 'dummycolumn_test1' },\n    render: ({ value, onChange, onBlur }) => (\n      <Select\n        value={value as string[]}\n        onChange={onChange}\n        options={['1', '2']}\n        placeholder=\"\"\n        onBlur={onBlur}\n      />\n    ),\n  },\n  {\n    identifier: { name: 'dummycolumn_test2' },\n    render: ({ value, onChange }) => (\n      <BlurInput defaultValue={value as string} onChange={onChange} />\n    ),\n  },\n  {\n    identifier: { name: 'home_team_id' },\n    render: ({ value, onChange }) => (\n      <Select\n        value={value as string[]}\n        onChange={onChange}\n        options={['1', '2']}\n        placeholder=\"\"\n      />\n    ),\n  },\n];\n\nexport const Editable: StoryObj<typeof EditableTable> = {\n  args: {\n    values: dummyValuesEditable,\n    columnHeaders: headers,\n  },\n  render: ({ values, columnHeaders }) => {\n    const [data, setData] = useState(values);\n\n    const handleRemoveRow = (ind: number) => {\n      setData((prevData) => {\n        prevData.splice(ind, 1);\n        return [...prevData];\n      });\n    };\n\n    const vals = ['11', true, ['2'], 'dasda', ['2']];\n\n    const addRowVals = columnHeaders.map(\n      (header: TableHeader, index: number) => ({\n        identifierName: header.identifier.name,\n        value: vals[index] as TableCellType,\n      }),\n    );\n\n    const handleChangeData = (\n      rowInd: number,\n      columnName: string,\n      value: string | string[] | boolean,\n    ) => {\n      setData((data2) => {\n        const prevData = data2.slice();\n        const cellIndex = prevData[rowInd].findIndex(\n          (cell) => cell.identifierName === columnName,\n        );\n        const cell = prevData[rowInd][cellIndex];\n        prevData[rowInd][cellIndex] = { ...cell, value };\n        return prevData;\n      });\n    };\n\n    const handleAddRow = () => {\n      setData((prevData) => [...prevData, addRowVals]);\n    };\n\n    return (\n      <>\n        <Button onClick={handleAddRow}>Add</Button>\n        <EditableTable\n          columnHeaders={columnHeaders}\n          values={data}\n          rowComponents={rowComponents}\n          onChangeData={handleChangeData}\n          onDeleteRow={handleRemoveRow}\n          actions={[\n            {\n              label: 'go to stats',\n              handler: (column) => {\n                console.log(`go to stats of ${column}`);\n              },\n            },\n          ]}\n        />\n      </>\n    );\n  },\n};\n\n// converting old data structure to new one\ntype DataShape = {\n  identifierName: string;\n  value: any;\n};\n\nconst convertOldDataToNew = R.map(\n  R.reduce(\n    (acc, item: DataShape) => ({ ...acc, [item.identifierName]: [item.value] }),\n    {},\n  ),\n);\nconst dummyValues2 = convertOldDataToNew(dummyValuesEditable as DataShape[][]);\nconst editableTable2Columns = [\n  {\n    accessorKey: 'away_team_id',\n    // cell: since type is input we don't need to explicitly define cell\n  },\n  {\n    accessorKey: 'score',\n    cell: ({ value, onChange, onBlur }: TableCellRenderProps) => {\n      const handleChange = () => {\n        onChange(!(value as boolean));\n      };\n\n      return (\n        <Checkbox\n          ml=\"8px\"\n          checked={value as boolean}\n          onChange={handleChange}\n          variant=\"gray\"\n          onBlur={onBlur}\n        />\n      );\n    },\n  },\n  {\n    accessorKey: 'dummycolumn_test1',\n    cell: ({ value, onChange, onBlur }: TableCellRenderProps) => (\n      <Select\n        value={value as string[]}\n        onChange={onChange}\n        options={['1', '2']}\n        placeholder=\"\"\n        onBlur={onBlur}\n      />\n    ),\n  },\n  {\n    accessorKey: 'dummycolumn_test2',\n    // cell: since type is input we don't need to explicitly define cell\n  },\n  {\n    accessorKey: 'home_team_id',\n    cell: ({ value, onChange }: TableCellRenderProps) => (\n      <Select\n        value={value as string[]}\n        onChange={onChange}\n        options={['1', '2']}\n        placeholder=\"\"\n      />\n    ),\n  },\n];\n\nexport const Editable2: StoryObj<typeof EditableTable2> = {\n  args: {\n    hasFreezeButton: true,\n    columns: editableTable2Columns as any,\n    actions: [\n      {\n        label: 'go to stats',\n        handler: (column) => {\n          console.log(`go to stats of ${column}`);\n        },\n      },\n    ],\n  },\n  render: (props: any) => {\n    const [data, setData] = useState(dummyValues2);\n\n    const updateData = useCallback(\n      (rowIndex: number, columnId: string, value: any) => {\n        console.log({ rowIndex, columnId, value });\n        // Skip page index reset until after next rerender\n        setData((old) =>\n          old.map((row, index) => {\n            if (index === rowIndex) {\n              return {\n                ...old[rowIndex]!,\n                [columnId]: value,\n              };\n            }\n            return row;\n          }),\n        );\n      },\n      [],\n    );\n\n    const handleDeleteRow = (rowIdx: number) =>\n      setData((data) => data.filter((x, idx) => idx !== rowIdx));\n\n    return (\n      <EditableTable2\n        data={data}\n        onDeleteRow={handleDeleteRow}\n        updateData={updateData}\n        {...props}\n      />\n    );\n  },\n};\n"],"names":["meta","Table","headers","ReadOnly","dummyValues","props","Box","jsx","ReadOnlyTable","column","rowComponents","value","onChange","onBlur","BlurInput","handleChange","Checkbox","Select","Editable","dummyValuesEditable","values","columnHeaders","data","setData","useState","handleRemoveRow","ind","prevData","vals","addRowVals","header","index","handleChangeData","rowInd","columnName","data2","cellIndex","cell","handleAddRow","jsxs","Fragment","Button","EditableTable","convertOldDataToNew","R.map","R.reduce","acc","item","dummyValues2","editableTable2Columns","Editable2","updateData","useCallback","rowIndex","columnId","old","row","handleDeleteRow","rowIdx","x","idx","EditableTable2"],"mappings":"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"}
import{j as t,d,a as p,B as n}from"./index.esm-d48b4efe.js";const c=({gray:e,sx:r,...i})=>t(d,{...i,as:"h6",variant:`microlabeling${e?"Gray":""}`,sx:{wordWrap:"normal",...r}});try{microlabeling.displayName="microlabeling",microlabeling.__docgenInfo={description:"",displayName:"microlabeling",props:{gray:{defaultValue:null,description:"",name:"gray",required:!1,type:{name:"boolean"}}}}}catch{}const m={borderBottom:"2px solid",color:"grayShade3"},g=({mt:e="20px",mb:r="20px",mr:i="0",ml:l,width:s,legend:a,...o})=>p(n,{mt:e,mb:r,mr:i,ml:l||(a?"0":"-20px"),width:s||(a?"100%":"calc(100% + 40px)"),...o,children:[a?t(c,{gray:!0,children:a}):null,t(n,{mt:a?"5px":"0",sx:m,height:"1px"})]});try{divider.displayName="divider",divider.__docgenInfo={description:"",displayName:"divider",props:{mt:{defaultValue:{value:"20px"},description:"Margin on top",name:"mt",required:!1,type:{name:"string"}},mb:{defaultValue:{value:"20px"},description:"Margin on bottom",name:"mb",required:!1,type:{name:"string"}},mr:{defaultValue:{value:"0"},description:"Margin on right",name:"mr",required:!1,type:{name:"string"}},ml:{defaultValue:null,description:"Margin on left",name:"ml",required:!1,type:{name:"string"}},width:{defaultValue:null,description:`The width utility parses a component's \`width\` prop and converts it into a CSS width declaration.

- Numbers from 0-1 are converted to percentage widths.
- Numbers greater than 1 are converted to pixel values.
- String values are passed as raw CSS values.
- And arrays are converted to responsive width styles.`,name:"width",required:!1,type:{name:"string"}},legend:{defaultValue:null,description:"",name:"legend",required:!1,type:{name:"string"}}}}}catch{}export{g as D,c as M};
//# sourceMappingURL=index-5229c2f4.js.map

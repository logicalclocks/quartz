{"version":3,"file":"index-e0eb9095.js","sources":["../../src/components/holy-table/holy-table.context.ts","../../src/components/holy-table/cell/styles.ts","../../src/components/holy-table/cell/cell.tsx","../../src/components/holy-table/row/styles.ts","../../src/components/holy-table/row/row.tsx","../../src/components/holy-table/head-cell/styles.ts","../../src/components/holy-table/head-cell/head-cell.tsx","../../src/components/holy-table/styles.ts","../../src/components/holy-table/holy-table.tsx","../../src/components/holy-table/index.tsx"],"sourcesContent":["import { createContext } from 'react';\n\ntype ContextProps = {\n  bordered: boolean;\n  padded: boolean;\n  hoverable: boolean;\n  rowHeight: string;\n  standalone: boolean;\n  middleColumn?: number;\n};\n\nconst HolyTableContext = createContext<ContextProps>({} as ContextProps);\n\nexport default HolyTableContext;\n","import { SxStyleProp } from 'rebass';\n\nexport default (paddedVertically: boolean): SxStyleProp => ({\n  py: paddedVertically ? '12px' : 'initial',\n  px: '12px',\n  whiteSpace: 'pre',\n});\n","import React, { FC, ReactNode, useContext } from 'react';\nimport { Box, BoxProps } from 'rebass';\nimport HolyTableContext from '../holy-table.context';\nimport styles from './styles';\n\ninterface Props extends Omit<BoxProps, 'css'> {\n  children: ReactNode;\n}\n\nconst Cell: FC<Props> = ({ sx, children, ...props }: Props) => {\n  const { padded } = useContext(HolyTableContext);\n\n  const style = {\n    ...styles(padded),\n    ...sx,\n  };\n\n  return (\n    <Box as=\"td\" sx={style} {...props}>\n      {children}\n    </Box>\n  );\n};\n\nexport default Cell;\n","enum BorderSides {\n  left = 'Left',\n  right = 'Right',\n  top = 'Top',\n  bottom = 'Bottom',\n}\n\nfunction createBorder(side: BorderSides): { [key: string]: string } {\n  return {\n    [`border${side}Style`]: 'solid',\n    [`border${side}Width`]: '1px',\n    [`border${side}Color`]: 'grayShade2',\n  };\n}\n\nconst getBordersForTable = (standalone: boolean) => {\n  const integratedBorders = {\n    ...createBorder(BorderSides.top),\n    ...createBorder(BorderSides.bottom),\n  };\n\n  const standaloneBorders = {\n    ...integratedBorders,\n    ...createBorder(BorderSides.right),\n    ...createBorder(BorderSides.left),\n  };\n\n  return standalone ? standaloneBorders : integratedBorders;\n};\n\nconst hover = {\n  ':hover': {\n    bg: 'grayShade3',\n  },\n};\n\nexport default (\n  bordered: boolean,\n  hoverable: boolean,\n  standalone: boolean,\n) => ({\n  bg: 'white',\n  ...(bordered ? getBordersForTable(standalone) : {}),\n  ...(hoverable ? hover : {}),\n});\n","import React, { FC, ReactNode, useContext } from 'react';\nimport { Box, BoxProps } from 'rebass';\nimport HolyTableContext from '../holy-table.context';\nimport styles from './styles';\n\ninterface Props extends Omit<BoxProps, 'css'> {\n  children: ReactNode;\n}\n\nconst Row: FC<Props> = ({ sx, children, ...props }: Props) => {\n  const { bordered, hoverable, rowHeight, standalone } =\n    useContext(HolyTableContext);\n\n  const style = {\n    ...styles(bordered, hoverable, standalone),\n    ...sx,\n  };\n\n  return (\n    <Box as=\"tr\" sx={style} width=\"100%\" height={rowHeight} {...props}>\n      {children}\n    </Box>\n  );\n};\n\nexport default Row;\n","export default function (fillSpace: boolean) {\n  return {\n    textAlign: 'left',\n    width: fillSpace ? '100%' : 'auto',\n    whiteSpace: 'pre',\n    padding: '12px',\n  };\n}\n","import React, { ReactNode } from 'react';\nimport { BoxProps } from 'rebass';\nimport Labeling from '../../typography/labeling';\nimport styles from './styles';\n\ninterface Props extends Omit<BoxProps, 'css'> {\n  fillSpace?: boolean;\n  children: ReactNode;\n}\n\nconst HeadCell = ({ sx, fillSpace = false, children, ...props }: Props) => {\n  return (\n    <Labeling as=\"th\" gray pb=\"4px\" sx={styles(fillSpace)} {...props}>\n      {children}\n    </Labeling>\n  );\n};\n\nexport default HeadCell;\n","export default {\n  tableLayout: 'auto',\n  borderCollapse: 'collapse',\n  width: '100%',\n};\n","import React, { FC, ReactNode, useMemo } from 'react';\nimport { Box } from 'rebass';\nimport HeadCell from './head-cell/head-cell';\nimport HolyTableContext from './holy-table.context';\nimport styles from './styles';\n\nexport interface Props {\n  legend?: string[];\n  children: ReactNode;\n  bordered?: boolean;\n  padded?: boolean;\n  hoverable?: boolean;\n  middleColumn?: number;\n  standalone?: boolean;\n  rowHeight?: string;\n}\n\nconst HolyTable: FC<Props> = ({\n  legend,\n  children,\n  middleColumn,\n  bordered = true,\n  padded = true,\n  hoverable = true,\n  standalone = false,\n  rowHeight = '50px',\n  ...props\n}) => {\n  const value = useMemo(\n    () => ({\n      bordered,\n      padded,\n      hoverable,\n      middleColumn,\n      rowHeight,\n      standalone,\n    }),\n    [bordered, hoverable, middleColumn, padded, rowHeight, standalone],\n  );\n\n  return (\n    <HolyTableContext.Provider value={value}>\n      <Box as=\"table\" sx={styles} {...props}>\n        {legend ? (\n          /* the logic is that if there is a `legend`, then this is a very simple table and we can insert `tbody` and `thead`.//\n               otherwise, we want to be able to put our own `thead` and `tbody` with custom children\n    \n               so, there are two ways to do this:\n            */\n          <>\n            <Box as=\"thead\">\n              <Box as=\"tr\" width=\"100%\">\n                {legend.map((name, index) => (\n                  <HeadCell key={name} fillSpace={middleColumn === index}>\n                    {name}\n                  </HeadCell>\n                ))}\n              </Box>\n            </Box>\n            <Box as=\"tbody\">{children}</Box>\n          </>\n        ) : (\n          children\n        )}\n      </Box>\n    </HolyTableContext.Provider>\n  );\n};\n\nexport default HolyTable;\n","import Cell from './cell/cell';\nimport Row from './row';\nimport HolyTable from './holy-table';\nimport HeadCell from './head-cell';\n\ntype IHolyTable = typeof HolyTable;\n\ninterface HolyTableComponent extends IHolyTable {\n  HeadCell: typeof HeadCell;\n  Cell: typeof Cell;\n  Row: typeof Row;\n}\n\n(HolyTable as HolyTableComponent).HeadCell = HeadCell;\n(HolyTable as HolyTableComponent).Cell = Cell;\n(HolyTable as HolyTableComponent).Row = Row;\n\nexport type { Props as HolyTableProps } from './holy-table';\nexport default HolyTable as HolyTableComponent;\n"],"names":["HolyTableContext","createContext","styles$3","paddedVertically","Cell","sx","children","props","padded","useContext","style","styles","jsx","Box","createBorder","side","getBordersForTable","standalone","integratedBorders","standaloneBorders","hover","styles$2","bordered","hoverable","Row","rowHeight","styles$1","fillSpace","HeadCell","Labeling","HolyTable","legend","middleColumn","value","useMemo","jsxs","Fragment","name","index","HolyTable$1"],"mappings":"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"}
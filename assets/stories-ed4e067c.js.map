{"version":3,"file":"stories-ed4e067c.js","sources":["../../src/components/table/stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { StoryObj, Meta } from '@storybook/react';\n\nimport { Box } from 'rebass';\nimport Table from './index';\nimport ReadOnlyTable from './read-only';\n\nimport dummyValues from './read-only/dummydata.json';\nimport dummyValuesEditable from './editable/dummydata.json';\nimport EditableTable from './editable';\nimport { Button, Checkbox, Select } from '../../index';\nimport BlurInput from './editable/blur-input';\nimport { TableCellType, TableHeader, TableRowComponent } from './type';\n\nconst meta: Meta<typeof Table> = {\n  title: 'Tables',\n  component: Table,\n\n  argTypes: {\n    variant: {\n      control: {\n        type: 'select',\n        options: ['read-only'],\n      },\n      description: 'Type of table',\n      defaultValue: { summary: 'read-only' },\n    },\n  },\n};\nexport default meta;\n\nconst headers = [\n  {\n    identifier: { name: 'away_team_id' },\n  },\n  {\n    identifier: { name: 'score' },\n  },\n  {\n    identifier: { name: 'dummycolumn_test1' },\n  },\n  {\n    identifier: { name: 'dummycolumn_test2' },\n  },\n  {\n    identifier: { name: 'home_team_id' },\n  },\n];\n\nexport const ReadOnly: StoryObj<typeof ReadOnlyTable> = {\n  args: {\n    values: dummyValues,\n    columnHeaders: headers,\n  },\n  render: (props) => {\n    return (\n      <Box>\n        <ReadOnlyTable\n          {...props}\n          initialStaticColumn=\"score\"\n          actions={[\n            {\n              label: 'go to stats',\n              handler: (column) => {\n                console.log(`go to stats of ${column}`);\n              },\n            },\n          ]}\n        />\n      </Box>\n    );\n  },\n};\n\nexport const Editable: StoryObj<typeof EditableTable> = {\n  args: {\n    values: dummyValuesEditable,\n    columnHeaders: headers,\n  },\n  render: ({ values, columnHeaders }) => {\n    const [data, setData] = useState(values);\n\n    const handleRemoveRow = (ind: number) => {\n      setData((prevData) => {\n        prevData.splice(ind, 1);\n        return [...prevData];\n      });\n    };\n\n    const vals = ['11', true, ['2'], 'dasda', ['2']];\n\n    const addRowVals = columnHeaders.map(\n      (header: TableHeader, index: number) => ({\n        identifierName: header.identifier.name,\n        value: vals[index] as TableCellType,\n      }),\n    );\n\n    const rowComponents: TableRowComponent[] = [\n      {\n        identifier: { name: 'away_team_id' },\n        render: ({ value, onChange }) => (\n          <BlurInput defaultValue={value as string} onChange={onChange} />\n        ),\n      },\n      {\n        identifier: { name: 'score' },\n        render: ({ value, onChange }) => {\n          const handleChange = () => {\n            onChange(!(value as boolean));\n          };\n\n          return (\n            <Checkbox\n              ml=\"8px\"\n              checked={value as boolean}\n              onChange={handleChange}\n              variant=\"gray\"\n            />\n          );\n        },\n      },\n      {\n        identifier: { name: 'dummycolumn_test1' },\n        render: ({ value, onChange }) => (\n          <Select\n            value={value as string[]}\n            onChange={onChange}\n            options={['1', '2']}\n            placeholder=\"\"\n          />\n        ),\n      },\n      {\n        identifier: { name: 'dummycolumn_test2' },\n        render: ({ value, onChange }) => (\n          <BlurInput defaultValue={value as string} onChange={onChange} />\n        ),\n      },\n      {\n        identifier: { name: 'home_team_id' },\n        render: ({ value, onChange }) => (\n          <Select\n            value={value as string[]}\n            onChange={onChange}\n            options={['1', '2']}\n            placeholder=\"\"\n          />\n        ),\n      },\n    ];\n\n    const handleChangeData = (\n      rowInd: number,\n      columnName: string,\n      value: string | string[] | boolean,\n    ) => {\n      setData((data2) => {\n        const prevData = data2.slice();\n        const cellIndex = prevData[rowInd].findIndex(\n          (cell) => cell.identifierName === columnName,\n        );\n        const cell = prevData[rowInd][cellIndex];\n        prevData[rowInd][cellIndex] = { ...cell, value };\n        return prevData;\n      });\n    };\n\n    const handleAddRow = () => {\n      setData((prevData) => [...prevData, addRowVals]);\n    };\n\n    return (\n      <>\n        <Button onClick={handleAddRow}>Add</Button>\n        <EditableTable\n          columnHeaders={columnHeaders}\n          values={data}\n          rowComponents={rowComponents}\n          onChangeData={handleChangeData}\n          onDeleteRow={handleRemoveRow}\n          actions={[\n            {\n              label: 'go to stats',\n              handler: (column) => {\n                console.log(`go to stats of ${column}`);\n              },\n            },\n          ]}\n        />\n      </>\n    );\n  },\n};\n"],"names":["meta","Table","headers","ReadOnly","dummyValues","props","Box","jsx","ReadOnlyTable","column","Editable","dummyValuesEditable","values","columnHeaders","data","setData","useState","handleRemoveRow","ind","prevData","vals","addRowVals","header","index","rowComponents","value","onChange","BlurInput","handleChange","Checkbox","Select","handleChangeData","rowInd","columnName","data2","cellIndex","cell","handleAddRow","jsxs","Fragment","Button","EditableTable"],"mappings":"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"}
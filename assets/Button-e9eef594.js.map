{"version":3,"file":"Button-e9eef594.js","sources":["../../node_modules/ramda/es/defaultTo.js","../../node_modules/ramda/es/propOr.js","../../src/components/button/styles.ts","../../src/components/button/Button.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\n\nvar defaultTo =\n/*#__PURE__*/\n_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n\nexport default defaultTo;","import _curry3 from \"./internal/_curry3.js\";\nimport defaultTo from \"./defaultTo.js\";\nimport prop from \"./prop.js\";\n/**\n * Return the specified property of the given non-null object if the property\n * is present and it's value is not `null`, `undefined` or `NaN`.\n *\n * Otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const favorite = R.prop('favoriteLibrary');\n *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\n\nvar propOr =\n/*#__PURE__*/\n_curry3(function propOr(val, p, obj) {\n  return defaultTo(val, prop(p, obj));\n});\n\nexport default propOr;","import { SxStyleProp } from 'rebass';\nimport buttonsStyles from '../../theme/buttons';\n\nexport const wrapper = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n\n  py: '8px',\n  px: '15px',\n\n  borderRadius: 0,\n  boxSizing: 'border-box',\n\n  fontFamily: 'label',\n  fontWeight: 'label',\n  fontSize: 'label',\n\n  cursor: 'pointer',\n\n  transition: ({ transitions }) => transitions.button,\n\n  ':disabled': {\n    cursor: 'default',\n  },\n\n  '> span': {\n    mr: '8px',\n    display: 'flex',\n    height: '15px',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n} as SxStyleProp;\n\nexport const spinnerColor = (intent: keyof typeof buttonsStyles): string => {\n  const disabledStyles = buttonsStyles[intent][':disabled'];\n  return disabledStyles.color;\n};\n","import * as R from 'ramda';\nimport React from 'react';\nimport { Button as RebassButton, ButtonProps } from 'rebass';\n\n// Styles\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner';\nimport * as S from './styles';\n\nimport { Color } from '../../theme/types';\nimport { GetIcon, IconName } from '../icon';\nimport './link-button.css';\n\ntype Intent = 'primary' | 'secondary' | 'ghost' | 'inline' | 'alert';\nexport interface Props extends Omit<ButtonProps, 'css'> {\n  children: React.ReactNode;\n  /** Intent of a button, e.g. `ghost` to make it borderless */\n  intent?: Intent;\n  /** Icon to render left to text, an entry from `IconName`, e.g. `IconName.glass` for search */\n  icon?: IconName;\n  /** If you want it to be a link. Note: for `external` `_blank` targets the `rel=noreferrer noopener` is applied */\n  href?: string;\n  /** Whether it's an external link, i.e. outside the project */\n  external?: boolean;\n  /** When `true`, a spinner is hown */\n  isLoading?: boolean;\n  /** When `true`, and `isLoading`, doesn't show button text, only spinner */\n  loadingOnly?: boolean;\n  disabled?: boolean;\n}\n\nexport const Button = ({\n  icon,\n  children,\n  href,\n  target,\n  sx,\n  external = false,\n  disabled = false,\n  intent = 'primary',\n  loadingOnly = false,\n  isLoading = false,\n  type = 'button',\n  ...props\n}: Props) => {\n  const component = (\n    <RebassButton\n      variant={intent}\n      /** if it's disabled show as disabled button since a tag doesn't have disabled attribute */\n      as={href && !disabled ? 'span' : 'button'}\n      disabled={disabled || isLoading}\n      sx={{ ...S.wrapper, ...sx }}\n      type={type}\n      {...props}\n    >\n      {icon && (!loadingOnly || !isLoading) && (\n        <GetIcon icon={icon} size=\"md\" color={buttonIntentToColor(intent)} />\n      )}\n      {(!loadingOnly || !isLoading) && children}\n      {isLoading && (\n        <Spinner\n          color={S.spinnerColor(intent)}\n          ml={loadingOnly ? '0px' : '15px'}\n        />\n      )}\n    </RebassButton>\n  );\n\n  if (href) {\n    if (external) {\n      return (\n        <a\n          className=\"link-button\"\n          href={href}\n          target={target}\n          {...(target === '_blank' ? { rel: 'noopener noreferrer' } : {})}\n        >\n          {component}\n        </a>\n      );\n    }\n\n    return (\n      <Link className=\"link-button\" to={href} target={target}>\n        {component}\n      </Link>\n    );\n  }\n\n  return component;\n};\n\nexport default Button;\n\nconst intentToColor: { [intent in Intent]?: Color } = {\n  primary: 'white',\n  alert: 'labels.red',\n  /* [others]: 'primary' */\n};\n\nconst buttonIntentToColor = (intent: Intent): Color => {\n  const getColor = R.propOr(intent, 'primary');\n\n  return getColor(intentToColor);\n};\n"],"names":["defaultTo","_curry2","d","v","propOr","_curry3","val","p","obj","prop","propOr$1","wrapper","transitions","spinnerColor","intent","buttonsStyles","Button","icon","children","href","target","sx","external","disabled","loadingOnly","isLoading","type","props","component","jsxs","RebassButton","S.wrapper","jsx","GetIcon","buttonIntentToColor","Spinner","S.spinnerColor","Link","intentToColor","R.propOr"],"mappings":"8UAyBA,IAAIA,EAEJC,EAAQ,SAAmBC,EAAGC,EAAG,CAC/B,OAAOA,GAAK,MAAQA,IAAMA,EAAID,EAAIC,CACpC,CAAC,ECEGC,EAEJC,EAAQ,SAAgBC,EAAKC,EAAGC,EAAK,CACnC,OAAOR,EAAUM,EAAKG,EAAKF,EAAGC,CAAG,CAAC,CACpC,CAAC,EAED,MAAAE,EAAeN,EClCFO,EAAU,CACrB,QAAS,OACT,cAAe,MACf,WAAY,SAEZ,GAAI,MACJ,GAAI,OAEJ,aAAc,EACd,UAAW,aAEX,WAAY,QACZ,WAAY,QACZ,SAAU,QAEV,OAAQ,UAER,WAAY,CAAC,CAAE,YAAAC,KAAkBA,EAAY,OAE7C,YAAa,CACX,OAAQ,SACV,EAEA,SAAU,CACR,GAAI,MACJ,QAAS,OACT,OAAQ,OACR,eAAgB,SAChB,WAAY,QACd,CACF,EAEaC,EAAgBC,GACJC,EAAcD,CAAM,EAAE,WAAW,EAClC,MCNjB,MAAAE,EAAA,CAAA,CAAgB,KAAAC,EACrB,SAAAC,EACA,KAAAC,EACA,OAAAC,EACA,GAAAC,EACA,SAAAC,EAAA,GACW,SAAAC,EAAA,GACA,OAAAT,EAAA,UACF,YAAAU,EAAA,GACK,UAAAC,EAAA,GACF,KAAAC,EAAA,SACL,GAAAC,CAET,IAAA,CACE,MAAAC,EAAAC,EACEC,EAAC,CAAA,QAAAhB,EACU,GAAAK,GAAA,CAAAI,EAAA,OAAA,SAEwB,SAAAA,GAAAE,EACX,GAAA,CAAA,GAAAM,EAAA,GAAAV,CAAA,EACI,KAAAK,EAC1B,GAAAC,EACI,SAAA,CAEHV,IAAA,CAAAO,GAAA,CAAAC,IAAAO,EAAAC,EAAA,CAAA,KAAAhB,EAAA,KAAA,KAAA,MAAAiB,EAAApB,CAAA,CAAA,CAAA,GACoE,CAAAU,GAAA,CAAAC,IAAAP,EAEpCO,GAAAO,EAE/BG,EAAC,CAAA,MAAAC,EAAAtB,CAAA,EAC6B,GAAAU,EAAA,MAAA,MACF,CAAA,CAC5B,CAAA,CAAA,EAKN,OAAAL,EACEG,EACEU,EACE,IAAC,CAAA,UAAA,cACW,KAAAb,EACV,OAAAC,EACA,GAAAA,IAAA,SAAA,CAAA,IAAA,qBAAA,EAAA,CAAA,EAC6D,SAAAQ,CAE5D,CAAA,EAKPI,EAAAK,EAAA,CAAA,UAAA,cAAA,GAAAlB,EAAA,OAAAC,EAAA,SAAAQ,CAAA,CAAA,EAOFA,CACF,EAIAU,EAAA,CAAsD,QAAA,QAC3C,MAAA,YAGX,EAEAJ,EAAApB,GACEyB,EAAAzB,EAAA,SAAA,EAEAwB,CAAA","x_google_ignoreList":[0,1]}
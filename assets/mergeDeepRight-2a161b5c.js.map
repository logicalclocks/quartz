{"version":3,"file":"mergeDeepRight-2a161b5c.js","sources":["../../node_modules/.pnpm/ramda@0.28.0/node_modules/ramda/es/mergeWithKey.js","../../node_modules/.pnpm/ramda@0.28.0/node_modules/ramda/es/mergeDeepWithKey.js","../../node_modules/.pnpm/ramda@0.28.0/node_modules/ramda/es/mergeDeepRight.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _has from \"./internal/_has.js\";\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\n\nvar mergeWithKey =\n/*#__PURE__*/\n_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n\nexport default mergeWithKey;","import _curry3 from \"./internal/_curry3.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport mergeWithKey from \"./mergeWithKey.js\";\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\n\nvar mergeDeepWithKey =\n/*#__PURE__*/\n_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function (k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\n\nexport default mergeDeepWithKey;","import _curry2 from \"./internal/_curry2.js\";\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\n\nvar mergeDeepRight =\n/*#__PURE__*/\n_curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\n\nexport default mergeDeepRight;"],"names":["mergeWithKey","_curry3","fn","l","r","result","k","_has","mergeDeepWithKey","lObj","rObj","lVal","rVal","_isObject","mergeDeepRight","_curry2","mergeDeepRight$1"],"mappings":"uKA4BA,IAAIA,EAEJC,EAAQ,SAAsBC,EAAIC,EAAGC,EAAG,CACtC,IAAIC,EAAS,CAAA,EACTC,EAEJ,IAAKA,KAAKH,EACJI,EAAKD,EAAGH,CAAC,IACXE,EAAOC,CAAC,EAAIC,EAAKD,EAAGF,CAAC,EAAIF,EAAGI,EAAGH,EAAEG,CAAC,EAAGF,EAAEE,CAAC,CAAC,EAAIH,EAAEG,CAAC,GAIpD,IAAKA,KAAKF,EACJG,EAAKD,EAAGF,CAAC,GAAK,CAACG,EAAKD,EAAGD,CAAM,IAC/BA,EAAOC,CAAC,EAAIF,EAAEE,CAAC,GAInB,OAAOD,CACT,CAAC,ECfGG,EAEJP,EAAQ,SAASO,EAAiBN,EAAIO,EAAMC,EAAM,CAChD,OAAOV,EAAa,SAAUM,EAAGK,EAAMC,EAAM,CAC3C,OAAIC,EAAUF,CAAI,GAAKE,EAAUD,CAAI,EAC5BJ,EAAiBN,EAAIS,EAAMC,CAAI,EAE/BV,EAAGI,EAAGK,EAAMC,CAAI,CAE7B,EAAKH,EAAMC,CAAI,CACf,CAAC,EClBGI,EAEJC,EAAQ,SAAwBN,EAAMC,EAAM,CAC1C,OAAOF,EAAiB,SAAUF,EAAGK,EAAMC,EAAM,CAC/C,OAAOA,CACX,EAAKH,EAAMC,CAAI,CACf,CAAC,EAED,MAAAM,EAAeF","x_google_ignoreList":[0,1,2]}
{"version":3,"file":"index-67b5a72c.js","sources":["../../src/utils/index.ts","../../src/components/code/code.styles.ts","../../src/components/code/index.tsx"],"sourcesContent":["export const copyToClipboard = async (content: string): Promise<boolean> => {\n  return navigator.clipboard\n    .writeText(content)\n    .then(() => true)\n    .catch(() => false);\n};\n\nexport const saveToFile = (\n  title?: React.ReactElement | string,\n  content?: string,\n): void => {\n  if (title) {\n    const fileName = title.toString() || 'code';\n    if (content) {\n      const file = new Blob([content]);\n\n      const a = document.createElement('a');\n      const url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  }\n};\n","export const boxStyles: React.CSSProperties = {\n  width: '100%',\n  lineHeight: '16px',\n  whiteSpace: 'pre-wrap',\n  wordBreak: 'break-all',\n  backgroundColor: 'grayShade3',\n  fontWeight: 'text',\n  marginTop: 0,\n  marginBottom: 0,\n};\n\nexport const codeHeaderStyles = {\n  position: 'sticky',\n  top: 0,\n  zIndex: 1,\n  backgroundColor: 'grayShade2',\n  color: 'gray',\n  alignItems: 'center',\n  fontFamily: 'Inter',\n  fontWeight: 700,\n  fontSize: 'value',\n};\n\nexport const buttonsStyles = {\n  display: 'flex',\n  color: 'black',\n  fontFamily: 'Inter',\n  fontWeight: 700,\n  fontSize: '12px',\n  paddingTop: '2px',\n  paddingBottom: '3px',\n  paddingLeft: '8px',\n  paddingRight: '8px',\n  backgroundColor: 'grayShade2',\n  ':hover': {\n    backgroundColor: 'grayShade1',\n  },\n  ':active': {\n    backgroundColor: 'primaryShade1',\n  },\n  ':disabled': {\n    backgroundColor: 'primaryShade2',\n  },\n  borderLeftStyle: 'solid',\n  borderLeftWidth: 1,\n  borderLeftColor: 'grayShade1',\n  maxHeight: 23,\n  borderRadius: 0,\n  transition: 'all 0.8s cubic-bezier(0.19, 1, 0.22, 1)',\n};\n","import { EditorView } from '@codemirror/view';\nimport { useState } from 'react';\nimport { Box, Flex, FlexProps } from 'rebass';\n\nimport { LanguageName, loadLanguage } from '@uiw/codemirror-extensions-langs';\nimport { darcula } from '@uiw/codemirror-theme-darcula';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { copyToClipboard, saveToFile } from '../../utils';\nimport { Button } from '../button';\nimport ExpandViewer from '../expand-viewer';\nimport { GetIcon, IconName } from '../icon';\nimport { PopupProps } from '../popup';\nimport Value from '../typography/value';\nimport { buttonsStyles, codeHeaderStyles } from './code.styles';\n\nconst CONTENT_UPPER_BOUND = 12;\n\nexport interface CodeProps extends Omit<FlexProps, 'css' | 'title'> {\n  title?: React.ReactElement | string;\n  content: string;\n  language?: LanguageName;\n  copyButton?: boolean;\n  downloadButton?: boolean;\n  downloadCallback?: () => void;\n  wrapLongLines?: boolean;\n  showLineNumbers?: boolean;\n  copyCallback?: () => Promise<boolean>;\n  expandable?: boolean;\n  popupProps?: Omit<PopupProps, 'children' | 'isOpen' | 'onClose'>;\n}\n\nexport const defaultPopupProps = {\n  size: '7xl',\n};\n\nconst Code = ({\n  content,\n  language,\n  copyButton = false,\n  downloadButton = false,\n  expandable = false,\n  popupProps = defaultPopupProps,\n  ...props\n}: CodeProps) => {\n  const contentLines = content.split('\\n');\n\n  // if it's expandable render it inside ExpandViewer\n  if (expandable && contentLines.length > CONTENT_UPPER_BOUND) {\n    return (\n      <ExpandViewer\n        title=\"Code snippet expanded view\"\n        /**\n         * currently merging with built-in javascript spread\n         * if we need deep merging we may use lodash merge function instead\n         */\n        popupProps={{ ...defaultPopupProps, ...popupProps }}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        NormalComponent={() => (\n          <CodeSnippet\n            content={content}\n            language={language}\n            copyButton={copyButton}\n            downloadButton={downloadButton}\n            {...props}\n          />\n        )}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        BriefComponent={() => (\n          <CodeSnippet\n            content={contentLines.slice(0, CONTENT_UPPER_BOUND).join('\\n')}\n            language={language}\n            copyButton={copyButton}\n            downloadButton={downloadButton}\n            {...props}\n          />\n        )}\n      />\n    );\n  }\n\n  // if it's not expandable then render it Normaly\n  return (\n    <CodeSnippet\n      content={content}\n      language={language}\n      copyButton={copyButton}\n      downloadButton={downloadButton}\n      {...props}\n    />\n  );\n};\n\nexport default Code;\n\n// Normal Code Component\ntype CodeSnippetProps = Omit<CodeProps, 'popupProps' | 'expandable'>;\nconst CodeSnippet = ({\n  title,\n  content,\n  language,\n  copyButton,\n  downloadButton,\n  downloadCallback,\n  wrapLongLines,\n  showLineNumbers,\n  copyCallback,\n  ...props\n}: CodeSnippetProps) => (\n  <Flex\n    flexDirection=\"column\"\n    width=\"100%\"\n    height=\"100%\"\n    sx={{ position: 'relative' }}\n  >\n    <Flex width=\"100%\" sx={codeHeaderStyles}>\n      <Box flexGrow={1} ml=\"8px\" my={1}>\n        {title}\n      </Box>\n      {downloadButton && (\n        <DownloadButton\n          content={content}\n          downloadCallback={downloadCallback}\n          title={title}\n        />\n      )}\n      {copyButton && (\n        <CopyButton content={content} copyCallback={copyCallback} />\n      )}\n    </Flex>\n    <Flex\n      width=\"100%\"\n      variant=\"code\"\n      sx={{\n        p: 0,\n        '*': { fontFamily: 'inherit' },\n      }}\n      {...props}\n    >\n      <CodeMirror\n        value={content}\n        basicSetup={{\n          autocompletion: false,\n          lineNumbers: showLineNumbers,\n          foldGutter: false,\n        }}\n        style={{\n          width: '100%',\n        }}\n        extensions={[EditorView.lineWrapping].concat(\n          language ? [loadLanguage(language)!].filter(Boolean) : [],\n        )}\n        theme={darcula}\n        readOnly\n      />\n    </Flex>\n  </Flex>\n);\n\n// Download Button\nconst DownloadButton = ({\n  content,\n  downloadCallback,\n  title,\n}: Pick<CodeProps, 'content' | 'downloadCallback' | 'title'>) => {\n  const download = () => {\n    if (downloadCallback) {\n      downloadCallback();\n    } else {\n      saveToFile(title || 'download', content);\n    }\n  };\n\n  return (\n    <Box>\n      <Button intent=\"ghost\" sx={buttonsStyles} onClick={download}>\n        <GetIcon size=\"md\" icon={IconName.download} />\n        <Value ml=\"5px\" mt=\"1px\">\n          download\n        </Value>\n      </Button>\n    </Box>\n  );\n};\n\n// Copy Button\nconst CopyButton = ({\n  copyCallback,\n  content,\n}: Pick<CodeProps, 'copyCallback' | 'content'>) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyClicked = async () => {\n    let success = false;\n    if (copyCallback) {\n      success = await copyCallback();\n    } else {\n      success = await copyToClipboard(content);\n    }\n    setCopied(success);\n    setTimeout(() => {\n      setCopied(false);\n    }, 800);\n  };\n\n  return (\n    <Box>\n      <Button\n        intent=\"ghost\"\n        sx={buttonsStyles}\n        onClick={handleCopyClicked}\n        disabled={copied}\n      >\n        <GetIcon size=\"md\" icon={IconName.copy} />\n        <Value ml=\"5px\" mt=\"1px\">\n          {copied ? 'copied' : 'copy'}\n        </Value>\n      </Button>\n    </Box>\n  );\n};\n"],"names":["copyToClipboard","content","saveToFile","title","fileName","file","a","url","codeHeaderStyles","buttonsStyles","CONTENT_UPPER_BOUND","defaultPopupProps","Code","language","copyButton","downloadButton","expandable","popupProps","props","contentLines","jsx","ExpandViewer","CodeSnippet","downloadCallback","wrapLongLines","showLineNumbers","copyCallback","jsxs","Flex","Box","DownloadButton","CopyButton","CodeMirror","EditorView","loadLanguage","darcula","Button","GetIcon","IconName","Value","copied","setCopied","useState","success"],"mappings":"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"}
{"version":3,"file":"index-9bac2198.js","sources":["../../node_modules/.pnpm/ramda@0.28.0/node_modules/ramda/es/internal/_concat.js","../../node_modules/.pnpm/ramda@0.28.0/node_modules/ramda/es/append.js","../../src/components/graphs/split-graph/styles.ts","../../src/components/graphs/split-graph/index.tsx"],"sourcesContent":["/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n  idx = 0;\n\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n\n  idx = 0;\n\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n\n  return result;\n}","import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\n\nvar append =\n/*#__PURE__*/\n_curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n\nexport default append;","import { SxStyleProp } from 'rebass';\n\nexport const progressBarStyles = (\n  percent: number,\n  color: string,\n  isSelected: boolean,\n  borderColor: string,\n): SxStyleProp => ({\n  bg: color,\n  width: `${percent}%`,\n  marginRight: '2px',\n  border: isSelected ? '1px solid' : null,\n  borderColor,\n});\n\nexport const circleStyles = (\n  color: string,\n  isSelected: boolean,\n  borderColor: string,\n): SxStyleProp => ({\n  bg: color,\n  width: '10px',\n  height: '10px',\n  borderRadius: '50%',\n  border: isSelected ? '1px solid' : null,\n  borderColor,\n});\n\nexport const customComponentWrapperStyles = {\n  borderColor: 'grayShade3',\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  width: '100%',\n};\n","import { useMemo, useState } from 'react';\nimport { Box, Flex } from 'rebass';\nimport * as R from 'ramda';\n\nimport {\n  progressBarStyles,\n  circleStyles,\n  customComponentWrapperStyles,\n} from './styles';\nimport Label, { LabelProps } from '../../label';\nimport Labeling from '../../typography/labeling';\nimport { Badge } from '../../badge';\nimport { FlexProps } from '../../flex';\n\nexport const defaultGraphColors = [\n  '#FFADAD',\n  '#A0C4FF',\n  '#CAFFBF',\n  '#FFD6A5',\n  '#BDB2FF',\n  '#FFC6FF',\n  '#9BF6FF',\n  '#FDFFB6',\n];\n\nexport const defaultBorderColor = 'black';\n\nexport interface SplitGraphValue {\n  label?: string;\n  value: number;\n  isGap?: boolean;\n  trainSplit?: boolean;\n  renderCustomComponent?: (props: {\n    selected?: boolean;\n    color: string;\n  }) => JSX.Element;\n}\n\ntype LabelDirection = 'column' | 'row';\ntype AlignGraphAndLabel = 'center' | undefined;\nexport interface SplitGraphProps extends Omit<FlexProps, 'children'> {\n  values: SplitGraphValue[];\n  /** wether to show percentage or not */\n  withoutPercentage?: boolean;\n  labelProps?: Omit<LabelProps, 'children'>;\n  hideTrainSplitOnhover?: boolean;\n  /** to render aditional component as actions */\n  renderActions?: () => JSX.Element;\n  graphColors?: string[];\n  borderColors?: string[];\n  labelDirection?: LabelDirection;\n  widthLabelFlex?: string;\n  alignGraphAndLabel?: AlignGraphAndLabel;\n}\n\nconst SplitGraph = ({\n  values,\n  withoutPercentage = false,\n  labelProps,\n  hideTrainSplitOnhover,\n  renderActions,\n  graphColors = defaultGraphColors,\n  borderColors = [] as string[],\n  labelDirection = 'column',\n  widthLabelFlex = '100%',\n  alignGraphAndLabel = undefined,\n  ...props\n}: SplitGraphProps) => {\n  const [selectedIndex, setSelected] = useState<number | null>(null);\n\n  const handleSelect = (ind: number) => () => {\n    setSelected(ind);\n  };\n\n  const sum = useMemo(\n    () => values.reduce((acc, val) => acc + val.value, 0),\n    [values],\n  );\n\n  const gapIndexes = values\n    .map((item, index: number) => (item.isGap ? index : null))\n    .filter((item: number | null) => item !== null) as number[];\n\n  const colors = useMemo(\n    () =>\n      values.reduce(\n        (acc: string[], value: any, idx: number) =>\n          value.isGap\n            ? R.append('black', acc)\n            : R.append(\n                graphColors[\n                  (idx - gapIndexes.filter((gi) => gi < idx).length) %\n                    graphColors.length\n                ],\n                acc,\n              ),\n        [],\n      ),\n    [gapIndexes, values, graphColors],\n  );\n\n  return (\n    <Flex {...props} flexDirection=\"column\" alignItems={alignGraphAndLabel}>\n      <Flex width=\"100%\" height=\"10px\">\n        {values.map((value, ind) => (\n          <Box\n            onMouseEnter={handleSelect(ind)}\n            onMouseLeave={() => setSelected(null)}\n            sx={progressBarStyles(\n              (value.value / sum) * 100,\n              value.isGap ? 'grayShade3' : colors[ind],\n              ind === selectedIndex ||\n                (gapIndexes.includes(ind) &&\n                  gapIndexes.includes(selectedIndex ?? -1)),\n              borderColors.length ? borderColors[ind] : defaultBorderColor,\n            )}\n          />\n        ))}\n      </Flex>\n      {renderActions?.()}\n      <Flex mt=\"25px\" flexDirection={labelDirection} sx={{ gap: '7px' }}>\n        {values.map((value, ind) =>\n          value.isGap && value.renderCustomComponent ? (\n            <Flex\n              sx={customComponentWrapperStyles}\n              onMouseEnter={handleSelect(ind)}\n              onMouseLeave={() => setSelected(null)}\n            >\n              {value.renderCustomComponent({\n                color: 'grayShde3',\n                selected: ind === selectedIndex,\n              })}\n            </Flex>\n          ) : (\n            <Flex\n              width={widthLabelFlex}\n              alignItems=\"center\"\n              onMouseEnter={handleSelect(ind)}\n              onMouseLeave={() => setSelected(null)}\n            >\n              <Box\n                mr=\"10px\"\n                mt=\"3px\"\n                sx={{\n                  ...circleStyles(\n                    colors[ind],\n                    ind === selectedIndex,\n                    borderColors.length\n                      ? borderColors[ind]\n                      : defaultBorderColor,\n                  ),\n                  ...{ flexShrink: 0 },\n                }}\n              />\n              <Label mr=\"5px\" {...labelProps}>\n                {value.label}\n              </Label>\n              {!withoutPercentage && (\n                <Labeling width=\"30px\" gray mr=\"8px\">\n                  {`${Math.ceil((value.value / sum) * 100)}%`}\n                </Labeling>\n              )}\n              {value.renderCustomComponent &&\n                value.renderCustomComponent({\n                  selected: ind === selectedIndex,\n                  color: colors[ind],\n                })}\n              {value.trainSplit &&\n                !(hideTrainSplitOnhover && ind === selectedIndex) && (\n                  <Badge\n                    flexShrink={0}\n                    mt=\"-3px\"\n                    height=\"18px\"\n                    variant=\"default\"\n                    value=\"train split\"\n                  />\n                )}\n            </Flex>\n          ),\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default SplitGraph;\n"],"names":["_concat","set1","set2","idx","len1","len2","result","append","_curry2","el","list","append$1","progressBarStyles","percent","color","isSelected","borderColor","circleStyles","customComponentWrapperStyles","defaultGraphColors","defaultBorderColor","SplitGraph","values","withoutPercentage","labelProps","hideTrainSplitOnhover","renderActions","graphColors","borderColors","labelDirection","widthLabelFlex","alignGraphAndLabel","props","selectedIndex","setSelected","useState","handleSelect","ind","sum","useMemo","acc","val","gapIndexes","item","index","colors","value","R.append","gi","jsxs","Flex","jsx","Box","Label","Labeling","Badge"],"mappings":"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","x_google_ignoreList":[0,1]}
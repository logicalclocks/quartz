{"version":3,"file":"Badge-382da2e5.js","sources":["../../src/components/badge/utils/get-border-color.ts","../../src/components/badge/utils/get-border-animation.ts","../../src/components/badge/Badge.tsx"],"sourcesContent":["import { ITheme } from '../../../theme/types';\nimport { BadgeVariant } from '../types';\n\n// this is a workaround because styled-system does not support theme colors for `linear-gradient`\nexport const getBorderColor = (theme: ITheme, variant: BadgeVariant) => {\n  switch (variant) {\n    case 'light':\n      return theme.colors.grayShade1;\n    case 'default':\n      return theme.colors.black;\n    case 'label':\n      return theme.colors.black;\n    case 'success':\n      return theme.colors.labels.green;\n    case 'warning':\n      return theme.colors.labels.orange;\n    case 'notice':\n      return theme.colors.labels.yellow;\n    case 'fail':\n      return theme.colors.labels.red;\n    default:\n      return theme.colors.black;\n  }\n};\n","import { keyframes } from '@emotion/core';\n\nconst rotate = keyframes`\n  to {\n    transform: rotate(1turn);\n  }\n`;\n\nexport const getBorderAnimation = (borderColor: string) => {\n  return {\n    border: 'none',\n    display: 'inline-block',\n    position: 'relative',\n    zIndex: '0',\n    width: 'auto',\n    height: 'auto',\n    overflow: 'hidden',\n    padding: '3px 6px',\n    fontFamily: 'arial',\n    fontSize: '12px',\n    fontWeight: '500',\n    borderRadius: '1px',\n    color: 'orange',\n    ':before': {\n      content: \"''\",\n      position: 'absolute',\n      zIndex: '-2',\n      left: '-150%',\n      top: '-450%',\n      width: '400%',\n      height: '1000%',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: '50% 50%, 50% 50%',\n      backgroundPosition: '0 0, 100% 0, 100% 100%, 0 100%',\n      backgroundImage: `linear-gradient(${borderColor}, ${borderColor})`,\n      animation: `${rotate} 4s linear infinite`,\n    },\n    ':after': {\n      content: \"''\",\n      position: 'absolute',\n      zIndex: '-1',\n      left: '1px',\n      top: '1px',\n      width: 'calc(100% - 2px)',\n      height: 'calc(100% - 2px)',\n      background: 'inherit',\n      borderRadius: '1px',\n    },\n  };\n};\n","import React from 'react';\nimport { Flex, FlexProps, SxStyleProp } from 'rebass';\nimport { useTheme } from '../../theme/theme';\nimport { getIcon, IconName } from '../icon/list';\nimport Value from '../typography/value';\nimport { BadgeVariant } from './types';\nimport { getBorderColor, getBorderAnimation } from './utils';\n\ntype Mode = 'default' | 'bordered';\nexport interface Props extends Omit<FlexProps, 'css'> {\n  /** Value for the badge. E.g. 'pending' or 18 */\n  value: string | number;\n  /** One of badge variants. Defined by `BadgeVariant` type. E.g. `light` or `warning`... */\n  variant?: BadgeVariant;\n  /** Badge mode: `default` or `bordered` */\n  mode?: Mode;\n  /** Whether to show loading spinner */\n  loading?: boolean;\n  /** Icon, used as `IconName.nameOfTheIcon` e.g. `IconName.download` */\n  icon?: IconName;\n}\n\nconst THEME_PATH: Record<Mode, string> = {\n  default: 'variants.badges.primary',\n  bordered: 'variants.badges.bordered',\n};\n\nexport const Badge = ({\n  value,\n  variant = 'light',\n  mode = 'default',\n  loading = false,\n  icon,\n  sx,\n  ...props\n}: Props) => {\n  const theme = useTheme();\n\n  const borderColor = getBorderColor(theme, variant);\n  const borderStyle = loading\n    ? getBorderAnimation(borderColor)\n    : { borderRadius: '1px' };\n\n  return (\n    <Flex\n      as=\"span\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      px=\"6px\"\n      height=\"19px\"\n      sx={{ ...borderStyle, ...sx } as SxStyleProp}\n      variant={variant}\n      tx={loading ? THEME_PATH.bordered : THEME_PATH[mode]}\n      {...props}\n    >\n      <Value\n        as=\"span\"\n        display=\"flex\"\n        alignItems=\"center\"\n        lineHeight=\"13px\"\n        fontFamily=\"IBM Plex Mono\"\n        fontWeight=\"normal\"\n        sx={{\n          svg: {\n            height: '13px',\n            width: 'auto',\n            marginLeft: '5px',\n          },\n        }}\n      >\n        {value}\n        {icon && getIcon(icon, 'currentColor')}\n      </Value>\n    </Flex>\n  );\n};\n"],"names":["getBorderColor","theme","variant","rotate","keyframes","getBorderAnimation","borderColor","THEME_PATH","Badge","value","mode","loading","icon","sx","props","useTheme","borderStyle","jsx","Flex","jsxs","Value","getIcon"],"mappings":"oOAIa,MAAAA,EAAiB,CAACC,EAAeC,IAA0B,CACtE,OAAQA,EAAS,CACf,IAAK,QACH,OAAOD,EAAM,OAAO,WACtB,IAAK,UACH,OAAOA,EAAM,OAAO,MACtB,IAAK,QACH,OAAOA,EAAM,OAAO,MACtB,IAAK,UACI,OAAAA,EAAM,OAAO,OAAO,MAC7B,IAAK,UACI,OAAAA,EAAM,OAAO,OAAO,OAC7B,IAAK,SACI,OAAAA,EAAM,OAAO,OAAO,OAC7B,IAAK,OACI,OAAAA,EAAM,OAAO,OAAO,IAC7B,QACE,OAAOA,EAAM,OAAO,KACxB,CACF,ECrBME,EAASC;AAAA;AAAA;AAAA;AAAA,EAMFC,EAAsBC,IAC1B,CACL,OAAQ,OACR,QAAS,eACT,SAAU,WACV,OAAQ,IACR,MAAO,OACP,OAAQ,OACR,SAAU,SACV,QAAS,UACT,WAAY,QACZ,SAAU,OACV,WAAY,MACZ,aAAc,MACd,MAAO,SACP,UAAW,CACT,QAAS,KACT,SAAU,WACV,OAAQ,KACR,KAAM,QACN,IAAK,QACL,MAAO,OACP,OAAQ,QACR,iBAAkB,YAClB,eAAgB,mBAChB,mBAAoB,iCACpB,gBAAiB,mBAAmBA,MAAgBA,KACpD,UAAW,GAAGH,sBAChB,EACA,SAAU,CACR,QAAS,KACT,SAAU,WACV,OAAQ,KACR,KAAM,MACN,IAAK,MACL,MAAO,mBACP,OAAQ,mBACR,WAAY,UACZ,aAAc,KAChB,CAAA,GCzBJI,EAAA,CAAyC,QAAA,0BAC9B,SAAA,0BAEX,EAEOC,EAAA,CAAA,CAAe,MAAAC,EACpB,QAAAP,EAAA,QACU,KAAAQ,EAAA,UACH,QAAAC,EAAA,GACG,KAAAC,EACV,GAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAb,EAAAc,IAEAT,EAAAN,EAAAC,EAAAC,CAAA,EACAc,EAAAL,EAAAN,EAAAC,CAAA,EAAA,CAAA,aAAA,OAIA,OAAAW,EACEC,EAAC,CAAA,GAAA,OACI,WAAA,SACQ,eAAA,SACI,GAAA,MACZ,OAAA,OACI,GAAA,CAAA,GAAAF,EAAA,GAAAH,CAAA,EACqB,QAAAX,EAC5B,GAAAS,EAAAJ,EAAA,SAAAA,EAAAG,CAAA,EACmD,GAAAI,EAC/C,SAAAK,EAEJC,EAAC,CAAA,GAAA,OACI,QAAA,OACK,WAAA,SACG,WAAA,OACA,WAAA,gBACA,WAAA,SACA,GAAA,CACP,IAAA,CACG,OAAA,OACK,MAAA,OACD,WAAA,KACK,CACd,EACF,SAAA,CAECX,EAAAG,GAAAS,EAAAT,EAAA,cAAA,CACoC,CAAA,CAAA,CACvC,CAAA,CAGN"}